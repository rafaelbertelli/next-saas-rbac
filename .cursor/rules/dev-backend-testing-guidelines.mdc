---
description: 
globs: apps/api/**/*.spec.ts
alwaysApply: false
---
# Fastify Backend Testing Guidelines

## Fluxo de Execu√ß√£o Obrigat√≥rio

**QUANDO APLICAR**: Testes de rotas Fastify, services, reposit√≥rios, middleware, utils e error handlers

**COMANDO PADR√ÉO**: `npm test [arquivo.spec.ts]`

### Fluxo √önico com Branches Condicionais

1. **IDENTIFICAR** tipo de c√≥digo a testar
2. **SE simples** (Utils, Services b√°sicos) ‚Üí **Mock** depend√™ncias ‚Üí **Implementar** AAA pattern
3. **SE m√©dio** (Repositories, Middleware, Error Handlers) ‚Üí **Analisar** c√≥digo fonte ‚Üí **Mock** Prisma/JWT ‚Üí **Implementar** cen√°rios
4. **SE complexo** (Routes, Auth flows) ‚Üí **Analisar** c√≥digo ‚Üí **Mock** todas depend√™ncias ‚Üí **Testar** status codes ‚Üí **Validar** schemas
5. **EXECUTAR** teste ‚Üí **VALIDAR** resultado

## Configura√ß√µes Obrigat√≥rias

### Estrutura de Arquivos
```
src/services/organizations/create-organization/
‚îú‚îÄ‚îÄ create-organization.service.ts
‚îî‚îÄ‚îÄ create-organization.service.spec.ts    # MESMO DIRET√ìRIO
```

### Stack Tecnol√≥gico
- **Framework**: Jest + ts-jest
- **Mocking**: Jest mocks  
- **Database**: Prisma mocks
- **Auth**: JWT mocks

## Templates Concisos

### Service Testing
```typescript
import { serviceName } from "./service-name.service";
jest.mock("@/path/dependency");

describe("serviceName", () => {
  beforeEach(() => jest.clearAllMocks());
  it("should handle success + error cases", async () => {
    // AAA pattern: Arrange ‚Üí Act ‚Üí Assert
  });
});
```

### Repository Testing  
```typescript
import { prisma } from "@/infra/prisma/prisma-connection";
jest.mock("@/infra/prisma/prisma-connection");

describe("repositoryName", () => {
  beforeEach(() => jest.clearAllMocks());
  it("should perform database operation", async () => {
    // Mock prisma.model.method ‚Üí Call repository ‚Üí Assert result
  });
});
```

### Middleware Testing
```typescript
describe("middlewareName", () => {
  let mockApp: any; let preHandler: any;
  beforeEach(() => mockApp = { addHook: jest.fn((_, fn) => preHandler = fn) });
  it("should add functionality to request", async () => {
    // Setup ‚Üí Call preHandler ‚Üí Assert functionality added
  });
});
```

### Authentication Testing
```typescript
describe("authService", () => {
  it("should return user id for valid token + throw for invalid", async () => {
    // Mock jwtVerify success/failure ‚Üí Call service ‚Üí Assert result/error
  });
});
```

### Error Handler Testing
```typescript
describe("errorHandler", () => {
  let mockRequest: any; let mockReply: any;
  beforeEach(() => setup mocks with status/send chain);
  it("should handle different error types", () => {
    // Setup error ‚Üí Call handler ‚Üí Assert status + response
  });
});
```

### Utility Testing
```typescript
describe("utilFunction", () => {
  it("should transform input correctly", () => {
    // Direct input ‚Üí output validation
  });
});
```

**üìö EXEMPLOS COMPLETOS**: Ver arquivos existentes no projeto em `apps/api/src/**/*.spec.ts`

## Estrat√©gias de Mocking

### Prisma Centralized Mock
```typescript
// __mocks__/prisma-connection.ts
const mockMethods = {
  findFirst: jest.fn(),
  findUnique: jest.fn(), 
  create: jest.fn(),
  update: jest.fn(),
  delete: jest.fn(),
  findMany: jest.fn(),
};

export const prisma = {
  organization: mockMethods,
  user: mockMethods,
  member: mockMethods,
  project: mockMethods,
  invite: mockMethods,
};
```

### JWT Mock Pattern
```typescript
// Mock request.jwtVerify in tests
const mockRequest = {
  jwtVerify: jest.fn().mockResolvedValue({ sub: "user-id" })
} as unknown as FastifyRequest;
```

## Comandos de Valida√ß√£o

**EXECUTAR ANTES DE FINALIZAR:**
```bash
# Testar arquivo espec√≠fico
npm test example.service.spec.ts

# Com watch para desenvolvimento
npm test example.service.spec.ts --watch
```

**N√ÉO FINALIZAR SE:**
- Teste n√£o passa
- Warnings cr√≠ticos
- Mocks n√£o funcionam
