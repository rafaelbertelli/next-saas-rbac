---
description: 
globs: apps/api/**/*.spec.ts
alwaysApply: false
---
# Fastify Backend Testing Guidelines

## Mandatory Execution Flow

**WHEN TO APPLY**: Tests for Fastify routes, services, repositories, middleware, utils and error handlers

**DEFAULT COMMAND**: `npm test [file.spec.ts]`

### Single Flow with Conditional Branches

1. **IDENTIFY** type of code to test
2. **IF simple** (Utils, Basic Services) ‚Üí **Mock** dependencies ‚Üí **Implement** AAA pattern
3. **IF medium** (Repositories, Middleware, Error Handlers) ‚Üí **Analyze** source code ‚Üí **Mock** Prisma/JWT ‚Üí **Implement** scenarios
4. **IF complex** (Routes, Auth flows) ‚Üí **Analyze** code ‚Üí **Mock** all dependencies ‚Üí **Test** status codes ‚Üí **Validate** schemas
5. **EXECUTE** test ‚Üí **VALIDATE** result

## Mandatory Configurations

### File Structure
```
src/services/organizations/create-organization/
‚îú‚îÄ‚îÄ create-organization.service.ts
‚îî‚îÄ‚îÄ create-organization.service.spec.ts    # SAME DIRECTORY
```

### Technology Stack
- **Framework**: Jest + ts-jest
- **Mocking**: Jest mocks  
- **Database**: Prisma mocks
- **Auth**: JWT mocks

## Concise Templates

### Service Testing
```typescript
import { serviceName } from "./service-name.service";
jest.mock("@/path/dependency");

describe("serviceName", () => {
  beforeEach(() => jest.clearAllMocks());
  it("should handle success + error cases", async () => {
    // AAA pattern: Arrange ‚Üí Act ‚Üí Assert
  });
});
```

### Repository Testing  
```typescript
import { prisma } from "@/infra/prisma/prisma-connection";
jest.mock("@/infra/prisma/prisma-connection");

describe("repositoryName", () => {
  beforeEach(() => jest.clearAllMocks());
  it("should perform database operation", async () => {
    // Mock prisma.model.method ‚Üí Call repository ‚Üí Assert result
  });
});
```

### Middleware Testing
```typescript
describe("middlewareName", () => {
  let mockApp: any; let preHandler: any;
  beforeEach(() => mockApp = { addHook: jest.fn((_, fn) => preHandler = fn) });
  it("should add functionality to request", async () => {
    // Setup ‚Üí Call preHandler ‚Üí Assert functionality added
  });
});
```

### Authentication Testing
```typescript
describe("authService", () => {
  it("should return user id for valid token + throw for invalid", async () => {
    // Mock jwtVerify success/failure ‚Üí Call service ‚Üí Assert result/error
  });
});
```

### Error Handler Testing
```typescript
describe("errorHandler", () => {
  let mockRequest: any; let mockReply: any;
  beforeEach(() => setup mocks with status/send chain);
  it("should handle different error types", () => {
    // Setup error ‚Üí Call handler ‚Üí Assert status + response
  });
});
```

### Utility Testing
```typescript
describe("utilFunction", () => {
  it("should transform input correctly", () => {
    // Direct input ‚Üí output validation
  });
});
```

**üìö COMPLETE EXAMPLES**: See existing files in the project at `apps/api/src/**/*.spec.ts`

## Mocking Strategies

### Prisma Centralized Mock
```typescript
// __mocks__/prisma-connection.ts
const mockMethods = {
  findFirst: jest.fn(),
  findUnique: jest.fn(), 
  create: jest.fn(),
  update: jest.fn(),
  delete: jest.fn(),
  findMany: jest.fn(),
};

export const prisma = {
  organization: mockMethods,
  user: mockMethods,
  member: mockMethods,
  project: mockMethods,
  invite: mockMethods,
};
```

### JWT Mock Pattern
```typescript
// Mock request.jwtVerify in tests
const mockRequest = {
  jwtVerify: jest.fn().mockResolvedValue({ sub: "user-id" })
} as unknown as FastifyRequest;
```

## Test Prioritization

### ‚úÖ CRITICAL (Mandatory)
- [ ] Test executes and passes
- [ ] Functional mocks (Prisma/JWT)  
- [ ] Correct naming `.spec.ts`
- [ ] AAA pattern followed

### ‚ö†Ô∏è IMPORTANT
- [ ] Success + error scenarios
- [ ] Correct status codes (for routes)
- [ ] Organized describe/it structure

### üí° OPTIONAL
- [ ] Edge cases
- [ ] Performance
- [ ] High coverage

## Validation Commands

**EXECUTE BEFORE FINALIZING:**
```bash
# Test specific file
npm test example.service.spec.ts

# With watch for development
npm test example.service.spec.ts --watch
```

**DO NOT FINALIZE IF:**
- Test doesn't pass
- Critical warnings
- Mocks don't work

## Jest Configuration Reference

```typescript
// jest.config.ts - Minimal configuration
export default {
  preset: "ts-jest",
  testEnvironment: "node", 
  testMatch: ["**/*.spec.ts"],
  moduleNameMapper: { "^@/(.*)$": "<rootDir>/src/$1" },
};
```

```json
// package.json - Essential scripts  
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch"
  }
}
```
