---
description: 
globs: 
alwaysApply: false
---
---
description: Backend testing guidelines
globs: ["apps/api/**/*.spec*"]
alwaysApply: true
---

# Fastify Backend Testing Guidelines

## Instruções para LLM

**AÇÃO OBRIGATÓRIA**: Quando solicitado para criar ou revisar testes de backend, siga EXATAMENTE esta sequência:

1. **VERIFICAR**: Confirme se a solicitação se enquadra nos critérios da seção "Quando Aplicar"
2. **ANALISAR**: Execute análise do código backend a ser testado usando ferramentas disponíveis
3. **ESTRUTURAR**: Organize os testes seguindo os padrões estabelecidos
4. **IMPLEMENTAR**: Use os patterns e melhores práticas definidas
5. **EXECUTAR TESTES**: Execute `npm test [arquivo.spec.ts]` para validar que o teste específico passa
6. **VALIDAR**: Verifique se seguiu todas as diretrizes antes de finalizar

**ECONOMIA DE RECURSOS**: SEMPRE execute testes apenas nos arquivos específicos, não no projeto todo

**NOMENCLATURA OBRIGATÓRIA**: Usar `.spec.ts` para arquivos de teste

**LOCALIZAÇÃO OBRIGATÓRIA**: Mesmo diretório do arquivo sendo testado

## Fluxo de Desenvolvimento Linear

```
INÍCIO
  ↓
📋 Consultar [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)
  ↓
🔍 Executar [Análise do Código Backend](mdc:#1-análise-do-código-backend)
  ↓
🛠️ Aplicar [Padrões de Testing](mdc:#padrões-de-testing) + [Mocking Strategies](mdc:#estratégias-de-mocking)
  ↓
⚖️ Conflito? → [Resolução de Conflitos](mdc:#resolução-de-conflitos)
  ↓
✅ [Verificação e Validação](mdc:#comandos-de-verificação)
  ↓
🎯 FINALIZADO
```

## Modo Rápido (Para mudanças simples)

**Use quando**: Pequenas correções, ajustes de utilitários, ou mudanças triviais

**Processo simplificado**:
1. ✅ Verificar se é realmente simples (sem lógica complexa de API)
2. 🛠️ Implementar seguindo padrões básicos
3. ✅ Validar apenas itens "Críticos" do checklist

**Pular para casos simples**: Análise detalhada, documentação extensa, validação completa

## Quando Aplicar

Esta rule deve ser aplicada quando:
- Solicitado para criar testes de rotas Fastify
- Necessário testar services e lógica de negócio
- Requerido implementar testes de middleware
- Preciso testar repositórios com Prisma
- Solicitado para testar tratamento de erros e validações
- Necessário testar utilitários e helpers

## Índice de Navegação Rápida

- 🚨 [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) - **Consulte PRIMEIRO**
- ⚖️ [Resolução de Conflitos](mdc:#resolução-de-conflitos) - Para decisões difíceis
- 🔍 [Análise do Código Backend](mdc:#1-análise-do-código-backend) - Início do desenvolvimento
- 🛠️ [Padrões de Testing](mdc:#padrões-de-testing) - Durante implementação
- ✅ [Checklist Final](mdc:#checklist-de-validação-para-llm) - Antes de finalizar

## 0. Matriz de Prioridades

### Crítico (Bloqueia desenvolvimento)
- Teste específico executando e passando
- Mocks de Prisma funcionais
- Nomenclatura correta (.spec.ts)

### Importante (Impacta qualidade)
- AAA pattern (Arrange-Act-Assert)
- Cenários de sucesso e erro cobertos
- Mocks de middleware e autenticação
- Estrutura de describe/it organizada

### Opcional (Melhoria incremental)
- Edge cases testados
- Cobertura de código alta
- Testes de integração
- Performance de execução

## Resolução de Conflitos

### Ordem de Precedência:
1. **Funcionalidade > Padrões**: Se um padrão impede a funcionalidade, priorize a funcionalidade
2. **Segurança > Performance**: Nunca comprometa segurança por performance
3. **Legibilidade > Otimização**: Código legível é mais importante que micro-otimizações
4. **Convenções do projeto > Preferências pessoais**: Siga o que já existe no projeto

### Protocolo de Decisão:
1. **Identifique o conflito**: Qual diretriz está sendo violada?
2. **Consulte a precedência**: Use a ordem acima para decidir
3. **Documente a exceção**: Explique por que divergiu
4. **Valide o mínimo**: Garanta que itens "Críticos" ainda são atendidos

### Exemplos Práticos:
```typescript
// ❌ Conflito: Padrão vs Funcionalidade
// Padrão diz: mock todas as dependências
// Mas: teste de integração precisa de Prisma real

// ✅ Resolução: Priorizar funcionalidade
// Comentário: "Teste de integração - Prisma real necessário para validar fluxo completo"
```

### Quando Divergir:
- **Documente**: Adicione comentário explicando a exceção
- **Valide críticos**: Confirme que lint, tipos e mocks ainda funcionam
- **Priorize entrega**: Funcionalidade working > padrão perfeito

## 1. Análise do Código Backend

**ANTES DE INICIAR**: Consulte a [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

**EXECUTAR OBRIGATORIAMENTE:**

- **Funcionalidade**: Identificar rotas, services ou repositórios a serem testados
- **Dependências**: Mapear Prisma, middleware e dependências externas
- **Comportamentos**: Listar cenários de sucesso, erro e edge cases
- **Autenticação**: Analisar necessidades de mock de JWT/auth
- **Validações**: Identificar schemas Zod e validações de entrada

**AÇÃO**: Use `read_file` e `codebase_search` para analisar o código fonte.

### Diretrizes de Análise
- Identifique funcionalidades principais a serem testadas
- Mapeie dependências que precisam de mock (Prisma, JWT, etc.)
- Liste cenários de API (200, 400, 401, 404, 500)
- Prossiga com implementação quando tiver clareza dos requisitos

## 2. Estruturação dos Testes

**AÇÕES OBRIGATÓRIAS:**

- **Arquivo de teste**: Criar na mesma pasta do arquivo fonte
- **Nomenclatura**: Usar `.spec.ts`
- **Organização**: Estruturar com `describe` e `it`
- **Setup**: Configurar mocks de Prisma, JWT e dependências

## Padrões de Testing

### Testing Framework

#### Tecnologias Principais
- **Unit Tests**: Jest + ts-jest
- **Test Environment**: Node.js
- **Mocking**: Jest mocks
- **Database**: Prisma mocks
- **Authentication**: JWT mocks

#### Filosofia de Testing
- Escrever descrições de testes em inglês
- Manter testes independentes
- Testar cenários de sucesso e erro
- Usar AAA pattern (Arrange-Act-Assert)

### Service Testing Patterns

```typescript
import { createOrganizationService } from "./create-organization.service";
import { createOrganizationRepository } from "@/repositories/organizations/create-organization";
import { createSlug } from "@/utils/slug/create-slug";

jest.mock("@/repositories/organizations/create-organization");
jest.mock("@/utils/slug/create-slug");

describe("createOrganizationService", () => {
  const mockOrganization = {
    id: "org-1",
    name: "Test Org",
    slug: "test-org",
    domain: null,
    shouldAttachUsersByDomain: false,
    ownerId: "user-1",
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should create organization successfully", async () => {
    // Arrange
    const input = {
      userId: "user-1",
      name: "Test Org",
      domain: null,
      shouldAttachUsersByDomain: false,
    };

    (createSlug as jest.Mock).mockReturnValue("test-org");
    (createOrganizationRepository as jest.Mock).mockResolvedValue(mockOrganization);

    // Act
    const result = await createOrganizationService(input);

    // Assert
    expect(createSlug).toHaveBeenCalledWith("Test Org");
    expect(createOrganizationRepository).toHaveBeenCalledWith({
      userId: "user-1",
      name: "Test Org",
      domain: null,
      slug: "test-org",
      shouldAttachUsersByDomain: false,
    });
    expect(result).toEqual(mockOrganization);
  });
});
```

### Repository Testing Patterns

```typescript
import { prisma } from "@/infra/prisma/prisma-connection";
import { createOrganizationRepository } from "./create-organization.repository";

jest.mock("@/infra/prisma/prisma-connection");

describe("createOrganizationRepository", () => {
  const mockOrganization = {
    id: "org-1",
    name: "Acme Inc",
    domain: "acme.com",
    slug: "acme-inc",
    shouldAttachUsersByDomain: true,
    ownerId: "user-1",
    members: [],
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("should create an organization and return it", async () => {
    // Arrange
    (prisma.organization.create as jest.Mock).mockResolvedValue(mockOrganization);
    const input = {
      userId: "user-1",
      name: "Acme Inc",
      domain: "acme.com",
      slug: "acme-inc",
      shouldAttachUsersByDomain: true,
    };

    // Act
    const result = await createOrganizationRepository(input);

    // Assert
    expect(prisma.organization.create).toHaveBeenCalledWith({
      data: {
        name: input.name,
        domain: input.domain,
        slug: input.slug,
        shouldAttachUsersByDomain: input.shouldAttachUsersByDomain,
        ownerId: input.userId,
        members: {
          create: {
            userId: input.userId,
            role: "ADMIN",
          },
        },
      },
    });
    expect(result).toEqual(mockOrganization);
  });

  it("should throw if prisma throws", async () => {
    // Arrange
    jest.mocked(prisma.organization.create).mockRejectedValueOnce(new Error());

    // Act & Assert
    await expect(createOrganizationRepository({} as any)).rejects.toThrow(
      "Failed to create organization"
    );
  });
});
```

### Middleware Testing Patterns

```typescript
import { getCurrentUserId } from "@/services/users/get-current-user-id";
import { FastifyInstance } from "fastify";
import { authMiddleware } from "./auth";

jest.mock("@/services/users/get-current-user-id");

describe("authMiddleware", () => {
  let app: FastifyInstance;
  let preHandler: (request: any, reply: any) => Promise<void>;

  beforeEach(async () => {
    app = {
      addHook: jest.fn((hookName, fn) => {
        if (hookName === "preHandler") {
          preHandler = fn;
        }
      }),
    } as unknown as FastifyInstance;

    await authMiddleware(app);
  });

  it("should call getCurrentUserId service when request.getCurrentUserId is called", async () => {
    // Arrange
    const request: any = {};
    const reply: any = {};
    (getCurrentUserId as jest.Mock).mockResolvedValue("user-123");

    await preHandler(request, reply);

    // Act
    const userId = await request.getCurrentUserId();

    // Assert
    expect(getCurrentUserId).toHaveBeenCalledWith(request);
    expect(userId).toBe("user-123");
  });
});
```

### Authentication Service Testing Patterns

```typescript
import { UnauthorizedError } from "@/routes/_error/4xx/unauthorized-error";
import { FastifyRequest } from "fastify";
import { getCurrentUserId } from "./get-current-user-id.service";

describe("getCurrentUserId", () => {
  it("should return the current user id when jwtVerify resolves with sub", async () => {
    // Arrange
    const request = {
      jwtVerify: jest.fn().mockResolvedValue({ sub: "123" }),
    } as unknown as FastifyRequest;

    // Act
    const userId = await getCurrentUserId(request);

    // Assert
    expect(userId).toBe("123");
    expect(request.jwtVerify).toHaveBeenCalled();
  });

  it("should throw UnauthorizedError if jwtVerify rejects", async () => {
    // Arrange
    const request = {
      jwtVerify: jest.fn().mockRejectedValue(new Error("Invalid token")),
    } as unknown as FastifyRequest;

    // Act & Assert
    await expect(getCurrentUserId(request)).rejects.toThrow(UnauthorizedError);
    await expect(getCurrentUserId(request)).rejects.toThrow("Invalid token");
    expect(request.jwtVerify).toHaveBeenCalled();
  });

  it("should throw UnauthorizedError if jwtVerify does not return sub", async () => {
    // Arrange
    const request = {
      jwtVerify: jest.fn().mockResolvedValue({}),
    } as unknown as FastifyRequest;

    // Act & Assert
    await expect(getCurrentUserId(request)).rejects.toThrow(UnauthorizedError);
    await expect(getCurrentUserId(request)).rejects.toThrow("Invalid token");
    expect(request.jwtVerify).toHaveBeenCalled();
  });
});
```

### Error Handler Testing Patterns

```typescript
import { hasZodFastifySchemaValidationErrors } from "fastify-type-provider-zod";
import { ZodError } from "zod";
import { NotFoundError } from "./4xx/not-found-error";
import { UnauthorizedError } from "./4xx/unauthorized-error";
import { errorHandler } from "./error-handler";

jest.mock("fastify-type-provider-zod");

describe("errorHandler", () => {
  let mockRequest: any;
  let mockReply: any;

  beforeEach(() => {
    jest.clearAllMocks();

    mockRequest = {
      method: "POST",
      url: "/test-endpoint",
      log: {
        error: jest.fn(),
      },
    };

    mockReply = {
      status: jest.fn().mockReturnThis(),
      send: jest.fn().mockReturnThis(),
    };
  });

  it("should handle Zod schema validation errors", () => {
    // Arrange
    const error = {
      validation: [
        {
          instancePath: "/email",
          message: "Invalid email format",
        },
      ],
    };
    jest.mocked(hasZodFastifySchemaValidationErrors).mockReturnValue(true);

    // Act
    errorHandler(error as any, mockRequest, mockReply);

    // Assert
    expect(mockReply.status).toHaveBeenCalledWith(400);
    expect(mockReply.send).toHaveBeenCalledWith({
      message: "Validation failed",
      errors: {
        email: "Invalid email format",
      },
    });
  });

  it("should handle NotFoundError", () => {
    // Arrange
    const error = new NotFoundError("Resource not found");
    jest.mocked(hasZodFastifySchemaValidationErrors).mockReturnValue(false);

    // Act
    errorHandler(error as any, mockRequest, mockReply);

    // Assert
    expect(mockReply.status).toHaveBeenCalledWith(404);
    expect(mockReply.send).toHaveBeenCalledWith({
      message: "Resource not found",
    });
  });

  it("should handle generic errors with 500 status", () => {
    // Arrange
    const error = new Error("Something went wrong");
    jest.mocked(hasZodFastifySchemaValidationErrors).mockReturnValue(false);

    // Act
    errorHandler(error as any, mockRequest, mockReply);

    // Assert
    expect(mockRequest.log.error).toHaveBeenCalledWith(error);
    expect(mockReply.status).toHaveBeenCalledWith(500);
    expect(mockReply.send).toHaveBeenCalledWith({
      message: "Internal server error",
    });
  });
});
```

### Utility Testing Patterns

```typescript
import { createSlug } from "./create-slug";

describe("createSlug", () => {
  it("should convert text to lowercase slug", () => {
    // Arrange
    const input = "Hello World";

    // Act
    const result = createSlug(input);

    // Assert
    expect(result).toBe("hello-world");
  });

  it("should remove accents and special characters", () => {
    // Arrange
    const input = "Olá Mundo! @#$%";

    // Act
    const result = createSlug(input);

    // Assert
    expect(result).toBe("ola-mundo");
  });

  it("should handle multiple spaces and hyphens", () => {
    // Arrange
    const input = "  Hello    World  --  Test  ";

    // Act
    const result = createSlug(input);

    // Assert
    expect(result).toBe("hello-world-test");
  });
});
```

## Estratégias de Mocking

### Prisma Mocking
- Use mock centralizado em `__mocks__/prisma-connection.ts`
- Mock métodos específicos por teste
- Mantenha consistência entre testes

```typescript
// __mocks__/prisma-connection.ts
const mockDbMethods = {
  findFirst: jest.fn(),
  findUnique: jest.fn(),
  create: jest.fn(),
  update: jest.fn(),
  delete: jest.fn(),
  findMany: jest.fn(),
};

export const prisma = {
  organization: mockDbMethods,
  user: mockDbMethods,
  member: mockDbMethods,
  project: mockDbMethods,
};
```

### JWT/Authentication Mocking
- Mock `jwtVerify` para testes de autenticação
- Simule cenários de token válido/inválido
- Teste casos de erro de autenticação

### Service Dependencies Mocking
- Mock dependências externas
- Use `jest.mock()` para módulos
- Mantenha mocks simples e focados

## Comandos de Verificação

**EXECUTAR OBRIGATORIAMENTE antes de finalizar:**

- **Execução de Testes**: Use `run_terminal_cmd` com `npm test [arquivo.spec.ts]` para executar apenas o teste específico
- **Validação de Resultados**: Confirme que o teste específico passa

**AÇÕES OBRIGATÓRIAS:**
```bash
# 1. Executar apenas o teste específico
npm test example.service.spec.ts

# 2. Verificar se o teste específico passa
# 3. Se o teste falhar, corrigir antes de finalizar
```

**IMPORTANTE**: Não finalize a implementação de testes se houver:
- Teste específico falhando
- Warnings críticos não resolvidos no arquivo

## Checklist de Validação para LLM

**OBRIGATÓRIO verificar antes de finalizar:**
**PRIORIZE**: Itens marcados como "Crítico" na [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

#### ✅ Crítico (Bloqueia entrega)
- [ ] Teste específico executando e passando
- [ ] Mocks de Prisma funcionais
- [ ] Nomenclatura correta (.spec.ts)

#### ✅ Importante (Impacta qualidade)
- [ ] AAA pattern (Arrange-Act-Assert) seguido
- [ ] Cenários de sucesso e erro cobertos
- [ ] Mocks de middleware e autenticação implementados
- [ ] Estrutura de describe/it organizada

#### ✅ Opcional (Melhoria incremental)
- [ ] Edge cases testados
- [ ] Cobertura de código considerada
- [ ] Performance de execução otimizada

**IMPORTANTE**: Não finalize sem completar itens "Críticos".

## Jest Configuration

### Configuração Base
```typescript
// jest.config.ts
import type { Config } from "jest";

const config: Config = {
  preset: "ts-jest",
  testEnvironment: "node",
  roots: ["<rootDir>/src"],
  moduleFileExtensions: ["ts", "js", "json"],
  testMatch: ["**/*.spec.ts"],
  collectCoverageFrom: ["src/**/*.{ts,js}"],
  coverageDirectory: "coverage",
  transform: {
    "^.+\\.(ts|tsx)$": "ts-jest",
  },
  moduleNameMapper: {
    "^@/(.*)$": "<rootDir>/src/$1",
  },
};

export default config;
```

### Scripts de Teste
```json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  }
}
```
