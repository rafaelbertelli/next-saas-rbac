---
alwaysApply: false
---

# Fastify Backend Development Guidelines

## LLM Instructions

**MANDATORY ACTION**: When requested to develop backend code, follow EXACTLY this sequence:

1. **ANALYZE**: Execute complete technical analysis before any implementation
2. **STRUCTURE**: Organize development following established patterns
3. **IMPLEMENT**: Use defined patterns and best practices
4. **VALIDATE**: Confirm that all guidelines were followed before finalizing

## Linear Development Flow

```
START → 📋 [Priority Matrix] → 🔍 [Technical Analysis] → 🛠️ [Implementation] → ✅ [Validation] → 🎯 FINISHED
```

## Quick Mode (For simple changes)

**Use when**: Small corrections, configuration adjustments, or trivial changes

**Simplified process**:

1. ✅ Verify if it's really simple (no complex logic)
2. 🛠️ Implement following basic patterns
3. ✅ Validate only "Critical" checklist items

## When to Apply

This rule should be applied when:

- Developing API routes with Fastify
- Implementing authentication/authorization middleware
- Creating business logic services
- Implementing repositories with Prisma
- Implementing custom error handling
- Developing input/output validation with Zod

## Quick Navigation Index

- 🚨 [Priority Matrix](mdc:#0-priority-matrix) - **Consult FIRST**
- ⚖️ [Conflict Resolution](mdc:#conflict-resolution) - For difficult decisions
- 🔍 [Technical Analysis](mdc:#1-technical-analysis) - Development start
- 🛠️ [Implementation Patterns](mdc:#3-implementation-patterns) - During implementation
- ✅ [Final Checklist](mdc:#8-verification-and-validation) - Before finalizing

## 0. Priority Matrix

### Critical (Blocks development)

- Correct TypeScript types
- Implemented error handling
- Functional authentication/authorization

### Important (Impacts quality)

- Input/output validation with Zod
- Route structure followed
- Naming patterns followed

### Optional (Incremental improvement)

- Performance optimizations
- Additional documentation

## Conflict Resolution

### Order of Precedence

1. **Security > Performance**: Never compromise security for performance
2. **Functionality > Patterns**: If a pattern prevents functionality, prioritize functionality
3. **Project conventions > Personal preferences**: Follow what already exists in the project

### Decision Protocol

1. **Identify the conflict**: Which guideline is being violated?
2. **Consult precedence**: Use the order above to decide
3. **Document the exception**: Explain why you diverged
4. **Validate minimum**: Ensure "Critical" items are still met

## 1. Technical Analysis

**BEFORE STARTING**: Consult the [Priority Matrix](mdc:#0-priority-matrix)

### Analysis Process

**EXECUTE MANDATORILY before any implementation:**

- **Requirements**: Identify necessary API functionalities
- **Security**: Map authentication/authorization needs
- **Integration**: Check external APIs and dependencies
- **Performance**: Analyze cache and optimization needs

**TOOLS**: Use `codebase_search` and `read_file` to analyze existing code.

## 2. Technology Stack

### Core Technologies

- **Runtime**: Node.js
- **Framework**: Fastify
- **Language**: TypeScript
- **ORM**: Prisma
- **Authentication**: @fastify/jwt
- **Validation**: Zod + fastify-type-provider-zod
- **Testing**: Jest + ts-jest
- **Database**: PostgreSQL

## 3. Implementation Patterns

### Route Structure

- Use async function or const for exports (both patterns accepted)
- Implement error handling via throw of custom classes
- Use `request` and `reply` as parameters (not `req`/`res`)
- Structure in own folder with `route.ts`, `schema.ts` and `index.ts`

**Route Template:**

```typescript
import { authMiddleware } from "@/http/middlewares/auth";
import { FastifyInstance } from "fastify";
import { ZodTypeProvider } from "fastify-type-provider-zod";
import { NotFoundError } from "@/routes/_error/4xx/not-found-error";

export const userProfileRoute = async (app: FastifyInstance) => {
  app
    .withTypeProvider<ZodTypeProvider>()
    .register(authMiddleware)
    .get("/users", { schema: userProfileSchema }, async (request, reply) => {
      const userId = await request.getCurrentUserId();
      const user = await getUserService(userId);

      if (!user) {
        throw new NotFoundError("User not found");
      }

      return reply.status(200).send({ data: { user } });
    });
};
```

### Service Layer

- Use functions instead of classes
- Define TypeScript types for parameters
- Separate business logic from routes
- Use repositories for data access

**Service Template:**

```typescript
type CreateOrganization = {
  userId: string;
  name: string;
  domain?: string | null;
  shouldAttachUsersByDomain?: boolean;
};

export async function createOrganizationService({
  userId,
  name,
  domain,
  shouldAttachUsersByDomain = false,
}: CreateOrganization) {
  const slug = createSlug(name);
  return await createOrganizationRepository({
    userId,
    name,
    domain,
    slug,
    shouldAttachUsersByDomain,
  });
}
```

### Repository Layer

- Use Prisma client directly
- Implement try/catch with specific errors
- Define types for parameters

**Repository Template:**

```typescript
import { prisma } from "@/infra/prisma/prisma-connection";

type CreateOrganizationRepository = {
  userId: string;
  name: string;
  domain?: string | null;
  slug: string;
  shouldAttachUsersByDomain: boolean;
};

export async function createOrganizationRepository(
  params: CreateOrganizationRepository
) {
  try {
    return await prisma.organization.create({
      data: {
        ...params,
        ownerId: params.userId,
        members: {
          create: {
            userId: params.userId,
            role: "ADMIN",
          },
        },
      },
    });
  } catch (error) {
    throw new Error("Failed to create organization");
  }
}
```

### Schema Patterns

```typescript
import { z } from "zod";

export const createOrganizationSchema = {
  tags: ["organizations"],
  summary: "Create a new organization",
  security: [{ bearerAuth: [] }],
  body: z.object({
    name: z.string(),
    domain: z.string().nullish(),
    shouldAttachUsersByDomain: z.boolean().optional(),
  }),
  response: {
    201: z.object({
      message: z.string(),
      data: z.object({
        organizationId: z.string().uuid(),
      }),
    }),
  },
};
```

### Error Handling

```typescript
export class NotFoundError extends Error {
  public statusCode = 404;
  constructor(message?: string) {
    super(message ?? "Not Found");
  }
}

// Usage in routes/services
if (!user) {
  throw new NotFoundError("User not found");
}
```

### Authentication Service

```typescript
export async function getCurrentUserId(request: FastifyRequest) {
  try {
    const { sub } = await request.jwtVerify<{ sub: string }>();
    if (!sub) throw new UnauthorizedError("Invalid token");
    return sub;
  } catch (error) {
    throw new UnauthorizedError("Invalid token");
  }
}
```

## 4. EXACT Folder Structure

```
apps/api/src/
├── http/
│   ├── server.ts
│   └── middlewares/auth.ts
├── routes/
│   ├── _error/
│   ├── users/user-profile/
│   ├── organizations/
│   ├── projects/
│   └── session/
├── services/
├── repositories/
├── infra/prisma/
└── utils/
```

## 5. Mandatory Patterns

### Import/Export Patterns

```typescript
// Always use absolute path with @/
import { prisma } from "@/infra/prisma/prisma-connection";
import { authMiddleware } from "@/http/middlewares/auth";

// In index.ts
export * from "./user-profile.route";
```

### Response Patterns

```typescript
// Success with data
return reply.status(200).send({ data: { user } });

// Success with message
return reply.status(201).send({
  message: "Organization created successfully",
  data: { organizationId: newOrganization.id },
});
```

### Input Validation

```typescript
// Zod Schema Patterns
export const createUserSchema = {
  body: z.object({
    name: z.string(),
    email: z.string().email(),
    domain: z.string().nullish(), // can be string, null or undefined
    shouldAttach: z.boolean().optional(), // can be boolean or undefined
  }),
};
```

### Security Patterns

```typescript
// JWT Configuration
app.register(fastifyJwt, {
  secret: env.JWT_SECRET,
  sign: { algorithm: "HS256" },
});

// Data Protection - Use specific select
const user = await prisma.user.findUnique({
  select: {
    id: true,
    name: true,
    email: true,
    avatarUrl: true,
    // passwordHash: false (don't include)
  },
  where: { id: userId },
});
```

## 6. Middleware Patterns

```typescript
import fastifyPlugin from "fastify-plugin";

export const authMiddleware = fastifyPlugin(async (app: FastifyInstance) => {
  app.addHook("preHandler", async (request, reply) => {
    request.getCurrentUserId = async () => await getCurrentUserId(request);
  });
});
```

## 7. TypeScript Extensions

```typescript
// In @types/fastify.d.ts
declare module "fastify" {
  interface FastifyRequest {
    getCurrentUserId: () => Promise<string>;
  }
}
```

## 8. Verification and Validation

### LLM Validation Checklist

#### ✅ Critical (Blocks delivery)

- [ ] Correct TypeScript types (no `any`)
- [ ] Implemented error handling (throw custom classes)
- [ ] Functional authentication/authorization (when applicable)
- [ ] Folder structure followed exactly
- [ ] Imports using absolute path (@/)

#### ✅ Important (Impacts quality)

- [ ] Zod schema defined correctly
- [ ] Response structured with `data` wrapper
- [ ] Service/Repository separation maintained
- [ ] Error classes with statusCode
- [ ] Async/await used consistently

**IMPORTANT**: Do not finalize without completing "Critical" items.

## Documentation and Tools

### Swagger/OpenAPI

- Configured automatically via fastify-swagger
- Zod schemas generate automatic documentation
- Available at `/docs` in development

### TypeScript Extension

- TypeScript extensions in `@types/fastify.d.ts`
- Request decoration with custom methods

```typescript
// In @types/fastify.d.ts
declare module "fastify" {
  interface FastifyRequest {
    getCurrentUserId: () => Promise<string>;
  }
}
```
