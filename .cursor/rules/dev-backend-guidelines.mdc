---
description: 
globs: 
alwaysApply: true
---
---
description: Backend development guidelines
globs: ["app/api/*"]
alwaysApply: true
---

# Fastify Backend Development Guidelines

## Instruções para LLM

**AÇÃO OBRIGATÓRIA**: Quando solicitado para desenvolver código backend, siga EXATAMENTE esta sequência:

1. **ANALISAR**: Execute análise técnica completa antes de qualquer implementação
2. **ESTRUTURAR**: Organize o desenvolvimento seguindo os padrões estabelecidos
3. **IMPLEMENTAR**: Use os patterns e melhores práticas definidas
4. **VERIFICAR**: Execute `npx eslint [arquivo]` no arquivo específico
5. **VALIDAR**: Confirme que seguiu todas as diretrizes antes de finalizar

**IMPORTANTE**: Execute lint apenas no arquivo específico para economia de recursos.

## Fluxo de Desenvolvimento Linear

```
INÍCIO
  ↓
📋 Consultar [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)
  ↓
🔍 Executar [Análise Técnica](mdc:#1-análise-técnica)
  ↓
🛠️ Aplicar [Fastify Patterns](mdc:#3-fastify-patterns) + [Service Layer](mdc:#4-service-layer)
  ↓
⚖️ Conflito? → [Resolução de Conflitos](mdc:#resolução-de-conflitos)
  ↓
✅ [Verificação e Validação](mdc:#9-verificação-e-validação)
  ↓
🎯 FINALIZADO
```

## Modo Rápido (Para mudanças simples)

**Use quando**: Pequenas correções, ajustes de configuração, ou mudanças triviais

**Processo simplificado**:
1. ✅ Verificar se é realmente simples (sem lógica complexa)
2. 🛠️ Implementar seguindo padrões básicos
3. 🔍 Executar `npx eslint [arquivo]`
4. ✅ Validar apenas itens "Críticos" do checklist

**Pular para casos simples**: Análise detalhada, documentação extensa, validação completa

## Quando Aplicar

Esta rule deve ser aplicada quando:
- Desenvolver rotas de API com Fastify
- Implementar middleware de autenticação/autorização
- Criar serviços de lógica de negócio
- Implementar repositórios com Prisma
- Implementar tratamento de erros customizado
- Configurar logging e monitoramento
- Desenvolver validações de entrada/saída com Zod

## Índice de Navegação Rápida

- 🚨 [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) - **Consulte PRIMEIRO**
- ⚖️ [Resolução de Conflitos](mdc:#resolução-de-conflitos) - Para decisões difíceis
- 🔍 [Análise Técnica](mdc:#1-análise-técnica) - Início do desenvolvimento
- 🛠️ [Fastify Patterns](mdc:#3-fastify-patterns) - Durante implementação
- ✅ [Checklist Final](mdc:#9-verificação-e-validação) - Antes de finalizar

## 0. Matriz de Prioridades

### Crítico (Bloqueia desenvolvimento)
- Lint sem erros
- Tipos TypeScript corretos
- Tratamento de erro implementado
- Autenticação/autorização funcionais

### Importante (Impacta qualidade)
- Logging apropriado com Pino
- Validação de entrada/saída com Zod
- Estrutura de rotas seguida
- Padrões de nomenclatura seguidos

### Opcional (Melhoria incremental)
- Otimizações de performance
- Documentação adicional
- Monitoramento avançado

## Resolução de Conflitos

### Ordem de Precedência:
1. **Segurança > Performance**: Nunca comprometa segurança por performance
2. **Funcionalidade > Padrões**: Se um padrão impede a funcionalidade, priorize a funcionalidade
3. **Legibilidade > Otimização**: Código legível é mais importante que micro-otimizações
4. **Convenções do projeto > Preferências pessoais**: Siga o que já existe no projeto

### Protocolo de Decisão:
1. **Identifique o conflito**: Qual diretriz está sendo violada?
2. **Consulte a precedência**: Use a ordem acima para decidir
3. **Documente a exceção**: Explique por que divergiu
4. **Valide o mínimo**: Garanta que itens "Críticos" ainda são atendidos

### Exemplos Práticos:
```typescript
// ❌ Conflito: Performance vs Segurança
// Performance diz: cache dados sensíveis
// Mas: dados contêm informações pessoais

// ✅ Resolução: Priorizar segurança
// Não fazer cache de dados sensíveis, implementar cache seletivo
```

### Quando Divergir:
- **Documente**: Adicione comentário explicando a exceção
- **Valide críticos**: Confirme que segurança e funcionalidade não são comprometidas
- **Priorize entrega**: Funcionalidade working > padrão perfeito

## 1. Análise Técnica

**ANTES DE INICIAR**: Consulte a [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

### Processo de Análise
**EXECUTAR OBRIGATORIAMENTE antes de qualquer implementação:**

- **Requisitos**: Identificar funcionalidades de API necessárias
- **Segurança**: Mapear necessidades de autenticação/autorização
- **Integração**: Verificar APIs externas e dependências
- **Performance**: Analisar necessidades de cache e otimização

**FERRAMENTAS**: Use `codebase_search` e `read_file` para analisar código existente.

### Diretrizes de Análise
- Identifique requisitos de segurança e performance
- Use `codebase_search` e `read_file` para contexto
- Documente decisões importantes de arquitetura
- Prossiga com implementação quando abordagem estiver clara

## 2. Technology Stack

### Core Technologies
- **Runtime**: Node.js
- **Framework**: Fastify
- **Language**: TypeScript
- **ORM**: Prisma
- **Authentication**: @fastify/jwt
- **Logging**: Pino (built-in do Fastify)
- **Validation**: Zod + fastify-type-provider-zod
- **Testing**: Jest + ts-jest
- **Database**: PostgreSQL

### Role Definition
Você é um engenheiro backend sênior especializado em Node.js, Fastify, TypeScript, Prisma, e desenvolvimento de APIs REST.

## 3. Fastify Patterns

### Route Structure
- Use async function ou const para exports (ambos padrões aceitos)
- Implemente tratamento de erro via throw de classes customizadas
- Use `request` e `reply` como parâmetros (não `req`/`res`)
- Use middleware de autenticação quando necessário
- Estruture em pasta própria com `route.ts`, `schema.ts` e `index.ts`

```typescript
import { authMiddleware } from "@/http/middlewares/auth";
import { prisma } from "@/infra/prisma/prisma-connection";
import { NotFoundError } from "@/routes/_error/4xx/not-found-error";
import { FastifyInstance } from "fastify";
import { ZodTypeProvider } from "fastify-type-provider-zod";
import { userProfileSchema } from "./schema";

export const userProfileRoute = async (app: FastifyInstance) => {
  app
    .withTypeProvider<ZodTypeProvider>()
    .register(authMiddleware)
    .get(
      "/users",
      {
        schema: userProfileSchema,
      },
      async (request, reply) => {
        const userId = await request.getCurrentUserId();

        const user = await prisma.user.findUnique({
          select: {
            id: true,
            name: true,
            email: true,
            avatarUrl: true,
          },
          where: {
            id: userId,
          },
        });

        if (!user) {
          throw new NotFoundError("User not found");
        }

        return reply.status(200).send({
          data: {
            user,
          },
        });
      }
    );
};
```

### Route POST Pattern
```typescript
import { authMiddleware } from "@/http/middlewares/auth";
import { createOrganizationService } from "@/services/organizations/create-organization";
import { FastifyInstance } from "fastify";
import { ZodTypeProvider } from "fastify-type-provider-zod";
import { createOrganizationSchema } from "./schema";

export async function createOrganizationRoute(app: FastifyInstance) {
  app
    .withTypeProvider<ZodTypeProvider>()
    .register(authMiddleware)
    .post(
      "/organizations",
      {
        schema: createOrganizationSchema,
      },
      async (request, reply) => {
        const userId = await request.getCurrentUserId();
        const { name, domain, shouldAttachUsersByDomain } = request.body;

        const newOrganization = await createOrganizationService({
          userId,
          name,
          domain,
          shouldAttachUsersByDomain,
        });

        return reply.status(201).send({
          message: "Organization created successfully",
          data: {
            organizationId: newOrganization.id,
          },
        });
      }
    );
}
```

### Schema Patterns
- Use `body` para definir schema de entrada
- Use `response` para definir schemas de resposta
- Inclua `tags` para organização no Swagger
- Inclua `summary` para documentação
- Use `security` para rotas autenticadas

```typescript
import { z } from "zod";

export const createOrganizationSchema = {
  tags: ["organizations"],
  summary: "Create a new organization",
  security: [
    {
      bearerAuth: [],
    },
  ],
  body: z.object({
    name: z.string(),
    domain: z.string().nullish(),
    shouldAttachUsersByDomain: z.boolean().optional(),
  }),
  response: {
    201: z.object({
      message: z.string(),
      data: z.object({
        organizationId: z.string().uuid(),
      }),
    }),
  },
};
```

### Middleware Patterns
- Use fastify-plugin para encapsular middleware
- Use hooks (`preHandler`) para interceptar requests
- Adicione métodos ao request via decoração

```typescript
import { getCurrentUserId } from "@/services/users/get-current-user-id";
import { FastifyInstance } from "fastify";
import fastifyPlugin from "fastify-plugin";

export const authMiddleware = fastifyPlugin(async (app: FastifyInstance) => {
  app.addHook("preHandler", async (request, reply) => {
    request.getCurrentUserId = async () => await getCurrentUserId(request);
  });
});
```

### Error Handling Patterns
- Use classes de erro customizadas com statusCode
- Throw erros diretamente nas rotas/services
- Error handler global processa e responde automaticamente

```typescript
export class NotFoundError extends Error {
  public statusCode = 404;

  constructor(message?: string) {
    super(message ?? "Not Found");
  }
}

// No handler de rota
if (!user) {
  throw new NotFoundError("User not found");
}
```

### File Structure Pattern
```
src/routes/users/user-profile/
├── user-profile.route.ts    # Implementação da rota
├── schema.ts                # Schema Zod para validação
└── index.ts                 # Export: export * from "./user-profile.route";
```

## 4. Service Layer

### Service Structure
- Use functions ao invés de classes
- Defina tipos TypeScript para parâmetros
- Separe lógica de negócio das rotas
- Use repositórios para acesso a dados
- Retorne dados estruturados

```typescript
import { createOrganizationRepository } from "@/repositories/organizations/create-organization";
import { createSlug } from "@/utils/slug/create-slug";

type CreateOrganization = {
  userId: string;
  name: string;
  domain?: string | null;
  shouldAttachUsersByDomain?: boolean;
};

export async function createOrganizationService({
  userId,
  name,
  domain,
  shouldAttachUsersByDomain = false,
}: CreateOrganization) {
  const slug = createSlug(name);

  const organization = await createOrganizationRepository({
    userId,
    name,
    domain,
    slug,
    shouldAttachUsersByDomain,
  });

  return organization;
}
```

### Authentication Service Pattern
- Use @fastify/jwt diretamente via request.jwtVerify
- Throw UnauthorizedError para erros de auth
- Valide presence do `sub` claim

```typescript
import { UnauthorizedError } from "@/routes/_error/4xx/unauthorized-error";
import { FastifyRequest } from "fastify";

export async function getCurrentUserId(request: FastifyRequest) {
  try {
    const { sub } = await request.jwtVerify<{ sub: string }>();

    if (!sub) {
      throw new UnauthorizedError("Invalid token");
    }

    return sub;
  } catch (error) {
    throw new UnauthorizedError("Invalid token");
  }
}
```

## 5. Repository Layer

### Repository Structure
- Use Prisma client diretamente
- Implemente try/catch com erros específicos
- Use transações para operações complexas
- Defina tipos para parâmetros

```typescript
import { prisma } from "@/infra/prisma/prisma-connection";

type CreateOrganizationRepository = {
  userId: string;
  name: string;
  domain?: string | null;
  slug: string;
  shouldAttachUsersByDomain: boolean;
};

export async function createOrganizationRepository({
  userId,
  name,
  domain,
  slug,
  shouldAttachUsersByDomain,
}: CreateOrganizationRepository) {
  try {
    const organization = await prisma.organization.create({
      data: {
        name,
        domain,
        slug,
        shouldAttachUsersByDomain,
        ownerId: userId,
        members: {
          create: {
            userId,
            role: "ADMIN",
          },
        },
      },
    });

    return organization;
  } catch (error) {
    throw new Error("Failed to create organization");
  }
}
```

### Prisma Configuration
- Use tipos gerados em `@/generated/prisma`
- Configure logging para desenvolvimento
- Centralize conexão em arquivo específico

```typescript
import { PrismaClient } from "@/generated/prisma";

export const prisma = new PrismaClient({
  log: ["info", "query", "warn", "error"],
});
```

## 6. Input Validation

### Zod Schema Patterns
- Use fastify-type-provider-zod para validação automática
- Defina schemas no arquivo `schema.ts`
- Use `.nullish()` para campos opcionais que podem ser null
- Use `.optional()` para campos truly opcionais

```typescript
import { z } from 'zod';

// No schema.ts
export const createUserSchema = {
  body: z.object({
    name: z.string(),
    email: z.string().email(),
    domain: z.string().nullish(), // pode ser string, null ou undefined
    shouldAttach: z.boolean().optional(), // pode ser boolean ou undefined
  })
};

// Inferindo tipos
type CreateUserRequest = z.infer<typeof createUserSchema.body>;
```

### Runtime Validation
- Validação automática via schema na rota
- Erros tratados pelo error handler global
- Acesso a dados validados via `request.body`

## 7. Security Patterns

### JWT Configuration
```typescript
// No server.ts
app.register(fastifyJwt, {
  secret: env.JWT_SECRET,
  sign: { algorithm: "HS256" },
});
```

### Authentication Middleware
```typescript
export const authMiddleware = fastifyPlugin(async (app: FastifyInstance) => {
  app.addHook("preHandler", async (request, reply) => {
    request.getCurrentUserId = async () => await getCurrentUserId(request);
  });
});
```

### Data Protection
- Sanitize dados sensíveis antes de retornar
- Use select específico no Prisma
- Nunca retorne passwordHash ou tokens

```typescript
const user = await prisma.user.findUnique({
  select: {
    id: true,
    name: true,
    email: true,
    avatarUrl: true,
    // passwordHash: false (não incluir)
  },
  where: { id: userId },
});
```

## 8. Implementation Guidelines

### Padrões Obrigatórios
- Use import/export ES6
- Defina tipos TypeScript explícitos
- Implemente tratamento de erro robusto
- Use async/await consistentemente
- Estruture código em camadas (routes -> services -> repositories)

### Estrutura de Pastas EXATA
```
apps/api/src/
├── http/
│   ├── server.ts
│   └── middlewares/
│       └── auth.ts
├── routes/
│   ├── _error/
│   │   ├── error-handler.ts
│   │   └── 4xx/
│   ├── users/
│   │   └── user-profile/
│   │       ├── user-profile.route.ts
│   │       ├── schema.ts
│   │       └── index.ts
│   ├── organizations/
│   ├── projects/
│   ├── session/
│   └── index.ts
├── services/
│   ├── users/
│   ├── organizations/
│   └── projects/
├── repositories/
│   ├── users/
│   ├── organizations/
│   └── projects/
├── infra/
│   └── prisma/
│       └── prisma-connection.ts
├── utils/
│   └── slug/
│       └── create-slug.ts
└── generated/
    └── prisma/
```

### Import Patterns
```typescript
// Sempre use path absoluto com @/
import { prisma } from "@/infra/prisma/prisma-connection";
import { authMiddleware } from "@/http/middlewares/auth";
import { NotFoundError } from "@/routes/_error/4xx/not-found-error";
import { getCurrentUserId } from "@/services/users/get-current-user-id";
```

### Export Patterns
```typescript
// Em index.ts
export * from "./user-profile.route";

// Em arquivos principais
export const routeName = async (app: FastifyInstance) => { /* */ };
export async function serviceName() { /* */ }
export async function repositoryName() { /* */ }
```

### Response Patterns
```typescript
// Sucesso com dados
return reply.status(200).send({
  data: { user },
});

// Sucesso com mensagem
return reply.status(201).send({
  message: "Organization created successfully",
  data: { organizationId: newOrganization.id },
});

// Erro via throw
throw new NotFoundError("User not found");
```

## 9. Verificação e Validação

### Lint Verification
**IMPORTANTE**: Instale eslint se não estiver disponível: `pnpm add -D eslint @repo/eslint-config`

Execute `npx eslint [arquivo]` no arquivo específico antes de finalizar.

**Exemplos EXATOS baseados na estrutura:**
```bash
# Para rota:
npx eslint apps/api/src/routes/users/user-profile/user-profile.route.ts

# Para service:
npx eslint apps/api/src/services/organizations/create-organization/create-organization.service.ts

# Para repository:
npx eslint apps/api/src/repositories/organizations/create-organization/create-organization.repository.ts
```

**Se eslint não estiver instalado:**
```bash
# No root do projeto
pnpm add -D eslint

# Ou no app específico
cd apps/api && pnpm add -D eslint
```

### Checklist de Validação para LLM

#### ✅ Crítico (Bloqueia entrega)
- [ ] Lint executado sem erros no arquivo específico
- [ ] Tipos TypeScript corretos (sem `any`)
- [ ] Tratamento de erro implementado (throw classes customizadas)
- [ ] Autenticação/autorização funcionais (quando aplicável)
- [ ] Estrutura de pastas seguida exatamente
- [ ] Imports usando path absoluto (@/)

#### ✅ Importante (Impacta qualidade)
- [ ] Schema Zod definido corretamente
- [ ] Response structured com `data` wrapper
- [ ] Service/Repository separation mantida
- [ ] Error classes com statusCode
- [ ] Async/await usado consistentemente

#### ✅ Opcional (Melhoria incremental)
- [ ] Logging implementado onde apropriado
- [ ] Documentação no schema (summary, tags)
- [ ] Validação de edge cases

**IMPORTANTE**: Não finalize sem completar itens "Críticos".

## Documentation e Tools

### Swagger/OpenAPI
- Configurado automaticamente via fastify-swagger
- Schemas Zod geram documentação automaticamente
- Disponível em `/docs` em desenvolvimento

### TypeScript Extension
- Extensões de tipos em `@types/fastify.d.ts`
- Decoração de request com métodos customizados

```typescript
// Em @types/fastify.d.ts
declare module "fastify" {
  interface FastifyRequest {
    getCurrentUserId: () => Promise<string>;
  }
}
```
