---
description: 
globs: 
alwaysApply: false
---
---
description: Frontend development guidelines - Conte√∫do mesclado entre nosso padr√£o e https://github.dev/melisource/fury_common-cursor-rules
globs: ["./app/*"]
alwaysApply: true
---

# Development Guidelines

## Instru√ß√µes para LLM

**A√á√ÉO OBRIGAT√ìRIA**: Quando solicitado para desenvolver c√≥digo frontend, siga EXATAMENTE esta sequ√™ncia:

1. **ANALISAR**: Execute an√°lise t√©cnica completa antes de qualquer implementa√ß√£o
2. **ESTRUTURAR**: Organize o desenvolvimento seguindo os padr√µes estabelecidos
3. **IMPLEMENTAR**: Use os patterns e melhores pr√°ticas definidas
4. **VERIFICAR**: Execute `npx eslint [arquivo]` no arquivo espec√≠fico
5. **VALIDAR**: Confirme que seguiu todas as diretrizes antes de finalizar

**IMPORTANTE**: Execute lint apenas no arquivo espec√≠fico para economia de recursos.

## Fluxo de Desenvolvimento Linear

```
IN√çCIO
  ‚Üì
üìã Consultar [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)
  ‚Üì
üîç Executar [An√°lise T√©cnica](mdc:#1-an√°lise-t√©cnica)
  ‚Üì
üõ†Ô∏è Aplicar [Code Patterns](mdc:#3-code-patterns) + [UI/UX Patterns](mdc:#4-uiux-patterns)
  ‚Üì
‚öñÔ∏è Conflito? ‚Üí [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)
  ‚Üì
‚úÖ [Verifica√ß√£o e Valida√ß√£o](mdc:#7-verifica√ß√£o-e-valida√ß√£o)
  ‚Üì
üéØ FINALIZADO
```

## Modo R√°pido (Para mudan√ßas simples)

**Use quando**: Pequenas corre√ß√µes, ajustes de estilo, ou mudan√ßas triviais

**Processo simplificado**:
1. ‚úÖ Verificar se √© realmente simples (sem l√≥gica complexa)
2. üõ†Ô∏è Implementar seguindo padr√µes b√°sicos
3. üîç Executar `npx eslint [arquivo]`
4. ‚úÖ Validar apenas itens "Cr√≠ticos" do checklist

**Pular para casos simples**: An√°lise detalhada, documenta√ß√£o extensa, valida√ß√£o completa

## Quando Aplicar

Esta rule deve ser aplicada quando:
- Desenvolver componentes React/TypeScript
- Implementar hooks ou utilit√°rios
- Criar ou modificar estilos SCSS
- Integrar com APIs atrav√©s de hooks
- Implementar padr√µes de acessibilidade

## √çndice de Navega√ß√£o R√°pida

- üö® [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) - **Consulte PRIMEIRO**
- ‚öñÔ∏è [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos) - Para decis√µes dif√≠ceis
- üîç [An√°lise T√©cnica](mdc:#1-an√°lise-t√©cnica) - In√≠cio do desenvolvimento
- üõ†Ô∏è [Padr√µes de C√≥digo](mdc:#3-code-patterns) - Durante implementa√ß√£o
- ‚úÖ [Checklist Final](mdc:#checklist-de-valida√ß√£o) - Antes de finalizar

## 0. Matriz de Prioridades

### Cr√≠tico (Bloqueia desenvolvimento)
- Lint sem erros
- Tipos TypeScript corretos
- Imports funcionais
- Componentes funcionais (n√£o classes)

### Importante (Impacta qualidade)
- Nomenclatura (named exports, verbos auxiliares)
- Hooks rules (dependency arrays, cleanup)
- Performance b√°sica (memo, keys em listas)
- Acessibilidade (ARIA, a11y)
- Estrutura de arquivos

### Opcional (Melhoria incremental)
- Otimiza√ß√µes avan√ßadas de performance
- Testing abrangente
- Refatora√ß√µes est√©ticas
- Documenta√ß√£o adicional

## Resolu√ß√£o de Conflitos

### Ordem de Preced√™ncia:
1. **Funcionalidade > Padr√µes**: Se um padr√£o impede a funcionalidade, priorize a funcionalidade
2. **Seguran√ßa > Performance**: Nunca comprometa seguran√ßa por performance
3. **Legibilidade > Otimiza√ß√£o**: C√≥digo leg√≠vel √© mais importante que micro-otimiza√ß√µes
4. **Conven√ß√µes do projeto > Prefer√™ncias pessoais**: Siga o que j√° existe no projeto

### Protocolo de Decis√£o:
1. **Identifique o conflito**: Qual diretriz est√° sendo violada?
2. **Consulte a preced√™ncia**: Use a ordem acima para decidir
3. **Documente a exce√ß√£o**: Explique por que divergiu
4. **Valide o m√≠nimo**: Garanta que itens "Cr√≠ticos" ainda s√£o atendidos

### Exemplos Pr√°ticos:
```typescript
// ‚ùå Conflito: Padr√£o vs Funcionalidade
// Padr√£o diz: use function declarations
// Mas: callback precisa ser arrow function para binding

// ‚úÖ Resolu√ß√£o: Priorizar funcionalidade
const handleCallback = useCallback((data) => {
  // Arrow function necess√°ria para contexto correto
}, []);
```

### Quando Divergir:
- **Documente**: Adicione coment√°rio explicando a exce√ß√£o
- **Valide cr√≠ticos**: Confirme que lint, tipos e imports ainda funcionam
- **Priorize entrega**: Funcionalidade working > padr√£o perfeito

## 1. An√°lise T√©cnica

**ANTES DE INICIAR**: Consulte a [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

### Processo de An√°lise
**EXECUTAR OBRIGATORIAMENTE antes de qualquer implementa√ß√£o:**

- **Requisitos**: Identificar funcionalidades necess√°rias
- **Depend√™ncias**: Mapear imports e bibliotecas necess√°rias
- **Arquitetura**: Definir estrutura de componentes/hooks
- **Integra√ß√£o**: Verificar necessidade de APIs ou contextos

**FERRAMENTAS**: Use `codebase_search` e `read_file` para analisar c√≥digo existente.

### Diretrizes de An√°lise
- Identifique requisitos e depend√™ncias principais
- Use `codebase_search` e `read_file` para contexto
- Documente decis√µes importantes
- Prossiga com implementa√ß√£o quando abordagem estiver clara

## 2. Technology Stack

### Core Technologies
- ReactJS/NextJS
- TypeScript/JavaScript
- HTML/SCSS
- Webpack
- Nordic
- Andes UI
- Frontend Remote Module

### Role Definition
Voc√™ √© um engenheiro frontend s√™nior especializado em React, TypeScript, acessibilidade web e frameworks da empresa (Nordic, Andes).

## 3. Code Patterns

### TypeScript Best Practices
- Use componentes funcionais com interfaces TypeScript
- Prefixe interfaces para props React com 'Props' (ex: ButtonProps)
- Defina tipos TypeScript quando poss√≠vel
- Evite classes, prefira programa√ß√£o funcional e declarativa

```typescript
// ‚úÖ Correto:
interface ButtonProps {
  variant: 'primary' | 'secondary';
  onClick: () => void;
  children: React.ReactNode;
}

function Button({ variant, onClick, children }: ButtonProps) {
  return (
    <button className={`btn btn--${variant}`} onClick={onClick}>
      {children}
    </button>
  );
}

// ‚ùå Evitar:
class Button extends React.Component { ... }
```

### Naming Conventions
- Use nomes descritivos com verbos auxiliares (ex: `isLoading`, `hasError`)
- Favore√ßa named exports para componentes
- Prefixe event handlers com "handle"

```typescript
// ‚úÖ Correto:
export function AuthWizard() { ... }
const isLoading = true;
const hasError = false;
function handleClick() {}

// ‚ùå Evitar:
export default AuthWizard;
const loading = true;
const error = false;
const clickHandler = () => {}
```

### File Structure
Estruture arquivos na seguinte ordem:
1. Exported component
2. Subcomponents
3. Helpers
4. Static content
5. Types

### Functions e Variables
- Use `function` declarations para fun√ß√µes puras
- Use early returns
- Evite chaves desnecess√°rias em condicionais
- Use sintaxe concisa para statements simples

```typescript
// ‚úÖ Correto:
function processData(data: string) {
  if (!data) return null;
  
  return data.trim().toLowerCase();
}

// ‚ùå Evitar:
const processData = (data: string) => {
  if (!data) {
    return null;
  } else {
    return data.trim().toLowerCase();
  }
}
```

### Array Methods
- Use retornos expl√≠citos com chaves

```typescript
// ‚úÖ Correto:
array.map((item) => {
  return item.value;
});

// ‚ùå Evitar:
array.map(item => item.value);
```

### Hooks Best Practices
- Siga as Rules of Hooks
- Use custom hooks para l√≥gica reutiliz√°vel
- Mantenha hooks focados e simples
- Use arrays de depend√™ncia apropriados em useEffect
- Implemente cleanup em useEffect quando necess√°rio
- Evite hooks aninhados
- Extraia l√≥gica reutiliz√°vel para custom hooks

```typescript
// ‚úÖ Correto:
function useUserData(userId: string) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!userId) return;

    setIsLoading(true);
    fetchUser(userId)
      .then(setUser)
      .finally(() => setIsLoading(false));

    // Cleanup se necess√°rio
    return () => {
      // Cancel requests, clear timers, etc.
    };
  }, [userId]);

  return { user, isLoading };
}

// ‚ùå Evitar:
function Component() {
  const [user, setUser] = useState(null);
  
  useEffect(() => {
    // Hook aninhado - NUNCA fa√ßa isso
    if (condition) {
      useEffect(() => { ... }, []);
    }
  }, []);
}
```

### State Management
- Use useState para estado local do componente
- Implemente useReducer para l√≥gica de estado complexa
- Use Context API para estado compartilhado
- Mantenha estado o mais pr√≥ximo poss√≠vel de onde √© usado
- Evite prop drilling atrav√©s de gerenciamento de estado apropriado
- Use bibliotecas de gerenciamento de estado apenas quando necess√°rio

```typescript
// ‚úÖ Correto - Estado local simples:
function Counter() {
  const [count, setCount] = useState(0);
  return <button onClick={() => setCount(c => c + 1)}>{count}</button>;
}

// ‚úÖ Correto - Estado complexo:
function useFormState(initialState: FormState) {
  return useReducer(formReducer, initialState);
}

// ‚úÖ Correto - Estado compartilhado:
const UserContext = createContext<UserContextType | null>(null);
```

### Performance
- Implemente memoiza√ß√£o apropriada (useMemo, useCallback)
- Use React.memo para componentes caros
- Evite re-renders desnecess√°rios
- Implemente lazy loading apropriado
- Use props key apropriadas em listas
- Profile e otimize performance de render

```typescript
// ‚úÖ Correto:
const MemoizedComponent = React.memo(({ data }) => {
  const processedData = useMemo(() => {
    return data.map(transformFunction);
  }, [data]);

  const handleClick = useCallback((id: string) => {
    onItemClick(id);
  }, [onItemClick]);

  return (
    <div>
      {processedData.map(item => (
        <Item 
          key={item.id} // Key apropriada
          data={item} 
          onClick={handleClick} 
        />
      ))}
    </div>
  );
});

// ‚ùå Evitar:
function Component({ data }) {
  return (
    <div>
      {data.map((item, index) => (
        <Item key={index} data={item} /> // Key com index
      ))}
    </div>
  );
}
```

### Component Structure
- Mantenha componentes pequenos e focados
- Prefira itera√ß√£o e modulariza√ß√£o sobre duplica√ß√£o de c√≥digo
- Use JSX declarativo
- Use Prettier para formata√ß√£o consistente

```typescript
// ‚úÖ Correto - Componente focado:
function UserCard({ user }: { user: User }) {
  return (
    <div className="user-card">
      <UserAvatar src={user.avatar} />
      <UserInfo name={user.name} email={user.email} />
    </div>
  );
}

// ‚ùå Evitar - Componente muito grande:
function UserDashboard() {
  // 200+ linhas de JSX misturando m√∫ltiplas responsabilidades
}
```

## 4. UI/UX Patterns

### Framework Integration
- Prefira componentes Andes quando dispon√≠veis
- Siga guias de design Nordic
- Mantenha consist√™ncia visual com design system

```typescript
import { Button } from '@andes/button';

function MyComponent() {
  return <Button variant="primary">Clique aqui</Button>;
}
```

### Styling & UI
- Use classes SCSS
- Siga conven√ß√µes de nomenclatura CSS (BEM quando apropriado)
- Mantenha consist√™ncia visual com design system
- Garanta altos padr√µes de acessibilidade (a11y) usando roles ARIA e props de acessibilidade nativas

```typescript
// ‚úÖ Correto:
function AccessibleButton({ onClick, children, isLoading }) {
  return (
    <button
      className="btn btn--primary"
      onClick={onClick}
      aria-label="Bot√£o para a√ß√£o principal"
      aria-busy={isLoading}
      disabled={isLoading}
      tabIndex={0}
    >
      {children}
    </button>
  );
}
```

### Accessibility
- Siga WCAG 2.1
- Implemente ARIA labels
- Garanta navega√ß√£o por teclado
- Use roles ARIA apropriados
- Teste com leitores de tela

```typescript
// ‚úÖ Correto:
import { render, screen, fireEvent } from '@testing-library/react';

test('should handle user interaction', () => {
  const handleClick = jest.fn();
  render(<Button onClick={handleClick}>Click me</Button>);
  
  fireEvent.click(screen.getByRole('button'));
  expect(handleClick).toHaveBeenCalledTimes(1);
});
```

## 6. Frontend-BFF Integration

### Hooks Implementation
- Hooks da `/app/hooks` s√£o a ponte de comunica√ß√£o entre Frontend e BFF
- Implemente hooks em `/app/hooks`
- Use TypeScript para interfaces e tipos
- Siga padr√£o de nomenclatura `use{Resource}`

```typescript
export interface AttachmentResponse {
  id: string;
  filename: string;
  container: string;
  content_type: string;
  status: number;
  url: string;
}

export const useAttachments = () => {
  const restclient = useRestClient({ timeout: 30000 });

  const createAttachment = async (files: Array<File>) => {
    try {
      const response = await restclient.post<AttachmentResponse[]>(
        '/api/attachments',
        { files }
      );
      return response.data;
    } catch (error) {
      throw new Error(`Failed to upload attachments: ${error.message}`);
    }
  };

  return { createAttachment };
};
```

### REST Client Usage
- Use `useRestClient` do frontend-remote-modules
- Configure timeouts apropriados
- Implemente tratamento de erro consistente

```typescript
const restclient = useRestClient({
  timeout: 30000, // Timeout espec√≠fico para uploads
});
```

### Response Handling
- Defina interfaces para responses
- Trate erros consistentemente
- Transforme dados quando necess√°rio

```typescript
interface ServiceResponse<T> {
  data: T;
  errors?: Array<ErrorType>;
}

const { data, errors } = await restclient.post<ServiceResponse<T>>(
  '/api/endpoint',
  payload,
);

if (errors?.length) {
  throw new Error(errors[0].message);
}
```

## 7. Implementation Guidelines

**LEMBRE-SE**: Consulte [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) para focar no que √© cr√≠tico primeiro.

### Padr√µes Obrigat√≥rios
- Escreva c√≥digo completo e funcional
- N√£o use TODOs ou placeholders
- Inclua todos os imports necess√°rios
- Siga princ√≠pios DRY
- Priorize legibilidade sobre performance
- Use sintaxe ES6+ para imports/exports

```typescript
import type { ComponentProps } from 'react';
import { useState, useCallback } from 'react';

interface MyComponentProps {
  initialValue: string;
}

export function MyComponent({ initialValue }: MyComponentProps) {
  const [value, setValue] = useState(initialValue);
  
  const handleChange = useCallback((newValue: string) => {
    setValue(newValue);
  }, []);
  
  return (
    <div>
      <input value={value} onChange={(e) => handleChange(e.target.value)} />
    </div>
  );
}
```

### Estrutura√ß√£o do C√≥digo
- Seguir estrutura de pastas do projeto
- Aplicar conven√ß√µes estabelecidas
- Organizar imports seguindo padr√µes
- Usar ES6+ syntax para exports

## 8. Verifica√ß√£o e Valida√ß√£o

**EM CASO DE CONFLITO**: Consulte [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)

### Lint Verification
Execute `npx eslint [arquivo]` no arquivo espec√≠fico antes de finalizar.

**Exemplos:**
```bash
# Para componente React:
npx eslint src/components/Button/Button.tsx

# Para hook customizado:
npx eslint src/hooks/useCustomHook.ts

# Para utilit√°rio:
npx eslint src/utils/formatDate.ts
```

**Se lint falhar:**
- Corrija TODOS os erros antes de prosseguir
- Use `npx eslint [arquivo] --fix` para corre√ß√µes autom√°ticas

### Checklist de Valida√ß√£o

**OBRIGAT√ìRIO verificar antes de finalizar:**
**PRIORIZE**: Itens marcados como "Cr√≠tico" na [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

#### ‚úÖ Cr√≠tico (Bloqueia entrega)
- [ ] Lint executado sem erros no arquivo espec√≠fico
- [ ] Tipos TypeScript corretos
- [ ] Imports funcionais
- [ ] Componentes funcionais (n√£o classes)

#### ‚úÖ Importante (Impacta qualidade)
- [ ] Nomenclatura seguida (named exports, verbos auxiliares)
- [ ] Hooks rules seguidas (dependency arrays, cleanup)
- [ ] Performance b√°sica (memo, keys em listas)
- [ ] Acessibilidade implementada (ARIA, a11y)
- [ ] Estrutura de arquivos organizada

#### ‚úÖ Opcional (Se tempo permitir)
- [ ] Otimiza√ß√µes avan√ßadas de performance aplicadas
- [ ] Testing implementado
- [ ] Documenta√ß√£o adicional

**IMPORTANTE**: N√£o finalize sem completar itens "Cr√≠ticos".

## 9. Documentation e Tools

### MCP Servers Dispon√≠veis
- **Frontend Toro**: Componentes Andes UI, Nordic e documenta√ß√£o espec√≠fica
- **Fury**: Service discovery, documenta√ß√£o t√©cnica e exemplos de implementa√ß√£o

### Access Permissions
- Acesso completo ao node_modules para refer√™ncia de documenta√ß√£o, verifica√ß√£o de tipos e exemplos de implementa√ß√£o
