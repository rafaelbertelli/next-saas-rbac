---
description: 
globs: 
alwaysApply: true
---
---
description: Frontend security guidelines to validate inputs, protect secrets, and prevent common vulnerabilities in web applications - https://github.dev/melisource/fury_common-cursor-rules
globs: ["*"]
alwaysApply: true
---

- Never trust parameters coming from the user before sending them to internal services.
- Validate inputs via **allow-lists**, **regex patterns**, or **type validation**.  
  Allow-list example:
  ```js
  const allowedPaymentMethods = ['credit_card', 'paypal', 'bank_transfer'];
  function isValidPaymentMethod(method) {
    return allowedPaymentMethods.includes(method);
  }
  ```
  Regex example:
  ```js
  const pattern = /ORD\d+$/;
  const isValidOrderID = (id) => pattern.test(id);
  ```
  Type-validation example:
  ```js
  const isNumber = Number(orderId);
  if (!isNumber) return res.status(400).json({ error: 'Invalid order ID' });
  ```
- Before reading, modifying, or deleting a resource, verify that the **authenticated user** owns the resource.  
  ```js
  if (req.auth.user?.id !== resource.userId) {
    return res.status(403).json({ error: 'Unauthorized' });
  }
  ```
- For guest (unauthenticated) flows, use **UUIDv4** identifiers.  
- Avoid sequential or predictable IDs.
- Do not embed secrets (tokens, keys, credentials) directly in client-side code.  
- Retrieve them with **Fury Secrets**:  
  ```js
  const { SecretClient } = require('node-melitk-secrets');
  const client = new SecretClient();
  await client.init();
  const sid = client.getSecret('TWILIO_ACCOUNT_SID');
  ```
- If a secret has been exposed, rotate the credential.
- Avoid using `dangerouslySetInnerHTML`.  
- If it is unavoidable, sanitize the input with **DOMPurify** (or isomorphic-dompurify):  
  ```jsx
  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(message) }} />
  ```
- Consider Markdown as a safer alternative.
- To prevent open redirects, use the `nordic/prevent-open-redirect` module with an allow-list and secure protocols.  
  ```js
  const preventOpenRedirect = require('nordic/prevent-open-redirect');
  const cfg = {
    params: ['go'],
    whitelist: ['www.mercadolibre.com.ar'],
    protocols: ['https:'],
    handleInvalidRedirectParam: (req, res) => {
      res.redirect('https://www.mercadolibre.com.ar/error');
    },
  };
  router.get('/invoices', preventOpenRedirect(cfg), (req, res) => { /* ... */ });
  ```
