---
description: 
globs: 
alwaysApply: true
---
---
description: Andes guideliness obtido de https://github.dev/melisource/fury_common-cursor-rules
globs: ["./app/*"]
alwaysApply: true
---

# Andes Components Guide

Andes is Mercado Libre's design system that provides consistent UI components across all applications. This guide outlines how to use Andes components in your MCP projects.

## Installation and Basic Setup

To use Andes components in your project:

```bash
# Install individual components
npm install --save @andes/[component-name]

# Example
npm install --save @andes/button
```

Each component has its own styles that need to be imported:

```scss
// In your SCSS file
@import '~@andes/[component-name]/index';

// Example
@import '~@andes/button/index';
```

## Typography

Typography in Andes provides consistent text styling across your application.

### Installation

```bash
npm install --save @andes/typography
```

### Import

```scss
// Import all typography styles
@import '~@andes/typography/index';

// Or import selectively
@import '~@andes/typography/base';

// Size imports
@import '~@andes/typography/lib/styles/size/x-small';
@import '~@andes/typography/lib/styles/size/small';
@import '~@andes/typography/lib/styles/size/medium';
@import '~@andes/typography/lib/styles/size/large';
@import '~@andes/typography/lib/styles/size/x-large';

// Color imports
@import '~@andes/typography/lib/styles/color/primary';
@import '~@andes/typography/lib/styles/color/secondary';
@import '~@andes/typography/lib/styles/color/disabled';
@import '~@andes/typography/lib/styles/color/inverted';
@import '~@andes/typography/lib/styles/color/negative';
@import '~@andes/typography/lib/styles/color/caution';
@import '~@andes/typography/lib/styles/color/positive';
@import '~@andes/typography/lib/styles/color/link';
```

### Typography Variables

```scss
// Font weights
$font-weight-light: 300;
$font-weight-regular: 400;
$font-weight-semibold: 600;
$font-weight-bold: 700;

// Font families
$font-family-primary: 'Proxima Nova', -apple-system, 'Roboto', Arial, sans-serif;

// Font sizes
$font-size-base-value: 16;
$font-size-base: 16px;
$font-size-12: 12px;
$font-size-14: 14px;
$font-size-16: 16px;
$font-size-18: 18px;
$font-size-20: 20px;
$font-size-24: 24px;
$font-size-28: 28px;
$font-size-32: 32px;
$font-size-44: 44px;
```

### Usage

```jsx
import { Text, Title, TextList, TextListItem } from '@andes/typography';

// Title with different sizes
<Title size="l" component="h2">Large Title</Title>
<Title size="m" component="h3">Medium Title</Title>
<Title size="s" component="h4">Small Title</Title>
<Title size="xs" component="h5">Extra Small Title</Title>

// Text with different colors
<Text>Default text (primary)</Text>
<Text color="secondary">Secondary text</Text>
<Text color="disabled">Disabled text</Text>
<Text color="inverted">Inverted text</Text>
<Text color="negative">Negative text</Text>
<Text color="caution">Caution text</Text>
<Text color="positive">Positive text</Text>
<Text color="link">Link text</Text>

// Text weight
<Text weight="semibold">Semibold text</Text>

// Text lists
<TextList srLabel="Features" markerType="check" markerColor="link">
  <TextListItem>Feature one</TextListItem>
  <TextListItem>Feature two</TextListItem>
</TextList>

<TextList srLabel="Steps" markerType="number">
  <TextListItem>Step one</TextListItem>
  <TextListItem>Step two</TextListItem>
</TextList>
```

## Colors

Andes uses a standardized color palette that needs to be used consistently across the application. Colors are typically accessed through the components directly rather than as variables.

### Color Variables

```scss
// Basic colors
$andes-white: #fff;
$andes-black: #000;

// Translucent Grays
$andes-gray-900: rgba($andes-black, 0.9); // primary text
$andes-gray-550: rgba($andes-black, 0.55); // secondary text
$andes-gray-250: rgba($andes-black, 0.25); // disabled text
$andes-gray-100: rgba($andes-black, 0.1);
$andes-gray-070: rgba($andes-black, 0.07);
$andes-gray-040: rgba($andes-black, 0.04);

// Solid Grays
$andes-gray-900-solid: #1A1A1A; // primary text
$andes-gray-550-solid: #737373; // secondary text
$andes-gray-250-solid: #BFBFBF; // disabled text
$andes-gray-100-solid: #E5E5E5;
$andes-gray-070-solid: #EDEDED;
$andes-gray-040-solid: #F5F5F5;

// Green
$andes-green-100: rgba(0, 166, 80, 0.1);
$andes-green-150: rgba(0, 166, 80, 0.15);
$andes-green-200: rgba(0, 166, 80, 0.2);
$andes-green-300: rgba(0, 166, 80, 0.3);
$andes-green-400: rgba(0, 166, 80, 0.4);
$andes-green-500: #00A650;
$andes-green-600: #008744;
$andes-green-700: #006633;
$andes-green-800: #004D27;

// Orange
$andes-orange-100: rgba(255, 119, 51, 0.1);
$andes-orange-150: rgba(255, 119, 51, 0.15);
$andes-orange-200: rgba(255, 119, 51, 0.2);
$andes-orange-300: rgba(255, 119, 51, 0.3);
$andes-orange-400: rgba(255, 119, 51, 0.4);
$andes-orange-500: #FF7733;
$andes-orange-600: #E6540B;
$andes-orange-700: #CC3E0A;
$andes-orange-800: #A62A08;

// Red
$andes-red-100: rgba(242, 61, 79, 0.1);
$andes-red-150: rgba(242, 61, 79, 0.15);
$andes-red-200: rgba(242, 61, 79, 0.2);
$andes-red-300: rgba(242, 61, 79, 0.3);
$andes-red-400: rgba(242, 61, 79, 0.4);
$andes-red-500: #F23D4F;
$andes-red-600: #D12440;
$andes-red-700: #A61D33;
$andes-red-800: #801627;

// Yellow
$andes-yellow-500: #FFE600;

// Base theme ('mercadolibre')
$andes-blue-base: rgb(65, 137, 230);
$andes-blue-100: rgba($andes-blue-base, 0.1);
$andes-blue-150: rgba($andes-blue-base, 0.15);
$andes-blue-200: rgba($andes-blue-base, 0.2);
$andes-blue-300: rgba($andes-blue-base, 0.3);
$andes-blue-400: rgba($andes-blue-base, 0.4);
$andes-blue-500: #3483FA;
$andes-blue-600: #2968C8;
$andes-blue-700: #1F4E96;
$andes-blue-800: #183C73;

/* Semantic layer */

// Brand
$andes-accent-color: $andes-blue-500;

// Accent
$andes-accent-color: $andes-blue-500;

// Background
$andes-bg-primary: $andes-gray-070-solid;
$andes-bg-secondary: $andes-gray-040-solid;
$andes-bg-white: $andes-white;

// Feedback

// Color Positive
$andes-success-green: $andes-green-500;
$andes-success-green-secondary: $andes-green-600;

// Color Caution
$andes-warning-orange: $andes-orange-500;
$andes-warning-orange-secondary: $andes-orange-600;

// Color Negative
$andes-error-red: $andes-red-500;
$andes-error-red-secondary: $andes-red-600;
```

Common color values:

- Primary/Brand blue: `#3483fa` ($andes-blue-500)
- Secondary text: `rgba(0, 0, 0, 0.55)` ($andes-gray-550)
- Disabled text: `rgba(0, 0, 0, 0.25)` ($andes-gray-250)
- Error/Negative: `#F23D4F` ($andes-red-500)
- Warning/Caution: `#FF7733` ($andes-orange-500)
- Success/Positive: `#00A650` ($andes-green-500)
- Link: `#3483FA` ($andes-blue-500)
- Background light: `#F5F5F5` ($andes-gray-040-solid)
- Border color: `#E5E5E5` ($andes-gray-100-solid)

## Spacing

### Spacing Variables

```scss
// Andes spacing variables
$andes-spacing-4: 4px;
$andes-spacing-8: 8px;
$andes-spacing-12: 12px;
$andes-spacing-16: 16px;
$andes-spacing-20: 20px;
$andes-spacing-24: 24px;
$andes-spacing-28: 28px;
$andes-spacing-32: 32px;
$andes-spacing-40: 40px;
$andes-spacing-48: 48px;
$andes-spacing-56: 56px;
$andes-spacing-64: 64px;
```

## Border Radius

```scss
// Border radius variables
$andes-border-radius-xs: 2px;
$andes-border-radius-s: 4px;
$andes-border-radius-m: 6px;
$andes-border-radius-l: 8px;
$andes-border-radius-xl: 12px;
$andes-border-radius-xxl: 16px;
$andes-border-radius-circle: 50%;
```

## Shadow Variables

```scss
// Shadow variables
$andes-shadow-level-1: 0 1px 2px 0 rgba(0, 0, 0, 0.1);
$andes-shadow-level-2: 0 2px 4px 0 rgba(0, 0, 0, 0.1);
$andes-shadow-level-3: 0 4px 8px 0 rgba(0, 0, 0, 0.1);
$andes-shadow-level-4: 0 8px 16px 0 rgba(0, 0, 0, 0.1);
$andes-shadow-level-5: 0 16px 24px 0 rgba(0, 0, 0, 0.1);
```

## Common Components

### Button

```jsx
import { Button, ButtonText } from '@andes/button';

// Hierarchy variants
<Button hierarchy="loud">Primary Button</Button>
<Button>Default Button</Button>
<Button hierarchy="quiet">Quiet Button</Button>
<Button hierarchy="transparent">Transparent Button</Button>

// Sizes
<Button size="small">Small Button</Button>
<Button>Default/Medium Button</Button>

// Disabled state
<Button disabled>Disabled Button</Button>

// With icon
<Button>
  <ButtonText>Button with Icon</ButtonText>
  <Icon />
</Button>

// Progress button
<ProgressButton loading={true} progressLabel="Loading...">
  Submit
</ProgressButton>
```

### Card

```jsx
import { Card, CardHeader, CardContent, CardFooter } from '@andes/card';

// Basic card
<Card>
  <CardContent>Content goes here</CardContent>
</Card>

// Card with header and footer
<Card>
  <CardHeader>Header</CardHeader>
  <CardContent>Content</CardContent>
  <CardFooter>Footer</CardFooter>
</Card>

// Colored card
<Card borderColor="neutral">
  <CardContent>Neutral card</CardContent>
</Card>
```

### TextField

```jsx
import { TextField, Password } from '@andes/textfield';

// Basic textfield
<TextField 
  label="Username" 
  placeholder="Enter your username"
  helper="This will be your public identifier"
/>

// With error
<TextField 
  label="Email" 
  error={true}
  errorMessage="Invalid email format"
/>

// Password field
<Password
  label="Password"
  placeholder="Enter your password"
  showHide={true}
/>

// Disabled field
<TextField 
  label="Read-only field" 
  disabled={true}
  defaultValue="Cannot be edited"
/>
```

### Radio Button

```jsx
import { RadioButton, RadioGroup } from '@andes/radio-button';

// Uncontrolled
<RadioGroup name="options" defaultValue="option1">
  <RadioButton id="opt1" value="option1" label="Option 1" />
  <RadioButton id="opt2" value="option2" label="Option 2" />
  <RadioButton id="opt3" value="option3" label="Option 3" disabled />
</RadioGroup>

// Controlled
const [value, setValue] = useState("option1");
const handleChange = (event) => setValue(event.target.value);

<RadioGroup name="options" value={value} onChange={handleChange}>
  <RadioButton id="opt1" value="option1" label="Option 1" />
  <RadioButton id="opt2" value="option2" label="Option 2" />
</RadioGroup>
```

### Snackbar

```jsx
import { Snackbar } from '@andes/snackbar';

// Basic notification
<Snackbar
  message="Operation successful"
  show={true}
  delay={3000}
/>

// With action button
<Snackbar
  message="Item added to cart"
  color="green"
  action={{ text: "View Cart", onClick: handleViewCart }}
  show={true}
/>

// Error notification
<Snackbar
  message="An error occurred"
  color="red"
  show={true}
/>
```

### Floating Menu

```jsx
import { FloatingMenu, FloatingMenuItem, FloatingMenuGroup } from '@andes/floating-menu';

// Basic menu
<FloatingMenu trigger={<button>Open Menu</button>}>
  <FloatingMenuItem value="1" title="Option 1" />
  <FloatingMenuItem value="2" title="Option 2" />
</FloatingMenu>

// With groups
<FloatingMenu trigger={<button>Payment Methods</button>}>
  <FloatingMenuGroup label="Credit Cards">
    <FloatingMenuItem value="visa" title="Visa" />
    <FloatingMenuItem value="mastercard" title="Mastercard" />
  </FloatingMenuGroup>
  <FloatingMenuGroup label="Other Payment Methods">
    <FloatingMenuItem value="cash" title="Cash" />
    <FloatingMenuItem value="transfer" title="Bank Transfer" />
  </FloatingMenuGroup>
</FloatingMenu>
```

## Controlled vs Uncontrolled Components

Andes supports both controlled and uncontrolled patterns for components like TextField, RadioGroup, Dropdown, etc.

### Uncontrolled (Component manages its own state)

```jsx
<TextField 
  defaultValue="Initial value" 
  onChange={handleChange}
/>
```

### Controlled (You manage the component's state)

```jsx
const [value, setValue] = useState("Initial value");

<TextField 
  value={value} 
  onChange={(e) => setValue(e.target.value)}
/>
```

## Tips for Using Andes Components in MCP

1. Always check for the latest component documentation in the Andes UI website
2. Import only the styles and components you need to keep bundle size small
3. Follow the controlled/uncontrolled pattern consistently within a form
4. Use the appropriate component hierarchy (e.g., loud buttons for primary actions)
5. Prefer importing component-specific styles rather than overriding with custom CSS
6. Use typography components rather than styling HTML elements directly
7. Rely on the built-in color palette to maintain design consistency
8. Follow accessibility guidelines provided in component documentation
