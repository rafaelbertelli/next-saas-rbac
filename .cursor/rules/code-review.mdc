---
description: 
globs: 
alwaysApply: false
---
---
description: Code review guidelines
globs: ["*"]
alwaysApply: true
---

# Rules for Professional Code Review

## Instru√ß√µes para LLM

**A√á√ÉO OBRIGAT√ìRIA**: Quando solicitado para realizar um code review, siga EXATAMENTE esta sequ√™ncia:

1. **VERIFICAR**: Confirme se a solicita√ß√£o se enquadra nos crit√©rios da se√ß√£o "Quando Aplicar"
2. **OBTER DIFF**: Execute `git diff` entre as branches apropriadas para obter changeset
3. **ANALISAR**: Execute an√°lise sistem√°tica dos arquivos modificados
4. **CRIAR ARQUIVO**: Use `edit_file` para criar o relat√≥rio seguindo a nomenclatura obrigat√≥ria
5. **APLICAR TEMPLATE**: Use EXATAMENTE o template fornecido, preenchendo todas as se√ß√µes
6. **VALIDAR**: Verifique se incluiu todos os elementos obrigat√≥rios antes de finalizar

**üö® IMPORTANTE**: N√ÉO apenas mostre o conte√∫do do review. DEVE criar o arquivo f√≠sico usando `edit_file`.

**NOMENCLATURA OBRIGAT√ìRIA**: `YYYY-MM-DD-branch-name-vX-review.md` (sempre come√ßar com v1)

**LOCALIZA√á√ÉO OBRIGAT√ìRIA**: `.notes/code-review/`

**QUANDO SOLICITADO PR DESCRIPTION**: Criar tamb√©m arquivo em `.notes/pr-description/` com mesmo nome substituindo `-review.md` por `-pr-description.md`

## Fluxo de Desenvolvimento Linear

```
IN√çCIO
  ‚Üì
üìã Consultar [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)
  ‚Üì
üîç Executar [Obten√ß√£o do Changeset](mdc:#1-obten√ß√£o-do-changeset)
  ‚Üì
üõ†Ô∏è Aplicar [An√°lise Sistem√°tica](mdc:#2-an√°lise-sistem√°tica) + [Estrutura√ß√£o do Relat√≥rio](mdc:#3-estrutura√ß√£o-do-relat√≥rio)
  ‚Üì
‚öñÔ∏è Conflito? ‚Üí [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)
  ‚Üì
‚úÖ [Verifica√ß√£o e Valida√ß√£o](mdc:#checklist-de-valida√ß√£o-para-llm)
  ‚Üì
üéØ FINALIZADO
```

## Quando Aplicar

Esta rule deve ser aplicada quando:
- Solicitado para realizar code review de uma branch ou PR
- Necess√°rio analisar mudan√ßas entre branches
- Requerido gerar relat√≥rio de an√°lise de c√≥digo
- Preciso avaliar qualidade e impacto de modifica√ß√µes

## √çndice de Navega√ß√£o R√°pida

- üö® [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) - **Consulte PRIMEIRO**
- ‚öñÔ∏è [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos) - Para decis√µes dif√≠ceis
- üîç [Obten√ß√£o do Changeset](mdc:#1-obten√ß√£o-do-changeset) - In√≠cio do code review
- üõ†Ô∏è [An√°lise Sistem√°tica](mdc:#2-an√°lise-sistem√°tica) - Durante an√°lise
- ‚úÖ [Checklist Final](mdc:#checklist-de-valida√ß√£o-para-llm) - Antes de finalizar

## 0. Matriz de Prioridades

### Cr√≠tico (Bloqueia code review)
- Git diff executado e changeset obtido
- An√°lise sistem√°tica de todos os arquivos
- Template de relat√≥rio aplicado corretamente usando `edit_file`
- Nomenclatura e localiza√ß√£o corretas: `.notes/code-review/YYYY-MM-DD-branch-name-vX-review.md`

### Importante (Impacta qualidade)
- Problemas cr√≠ticos identificados
- Sugest√µes de melhoria fornecidas
- Feedback categorizado com emojis
- Recomenda√ß√£o final clara

### Opcional (Melhoria incremental)
- Aspectos positivos destacados
- Documenta√ß√£o detalhada
- Hist√≥rico de vers√µes completo
- Formata√ß√£o para GitHub otimizada

## Resolu√ß√£o de Conflitos

### Ordem de Preced√™ncia:
1. **Funcionalidade > Padr√µes**: Se um padr√£o impede a funcionalidade, priorize a funcionalidade
2. **Seguran√ßa > Performance**: Nunca comprometa seguran√ßa por performance
3. **Legibilidade > Otimiza√ß√£o**: C√≥digo leg√≠vel √© mais importante que micro-otimiza√ß√µes
4. **Conven√ß√µes do projeto > Prefer√™ncias pessoais**: Siga o que j√° existe no projeto

### Protocolo de Decis√£o:
1. **Identifique o conflito**: Qual diretriz est√° sendo violada?
2. **Consulte a preced√™ncia**: Use a ordem acima para decidir
3. **Documente a exce√ß√£o**: Explique por que divergiu
4. **Valide o m√≠nimo**: Garanta que itens "Cr√≠ticos" ainda s√£o atendidos

### Exemplos Pr√°ticos:
```
// ‚ùå Conflito: Criticar padr√£o vs Funcionalidade working
// Padr√£o diz: "use function declarations"
// Mas: c√≥digo funciona corretamente com arrow functions

// ‚úÖ Resolu√ß√£o: Priorizar funcionalidade
// Coment√°rio no review: "Funciona corretamente. Sugest√£o opcional: considerar function declarations para consist√™ncia."
```

### Quando Divergir:
- **Documente**: Adicione coment√°rio explicando a exce√ß√£o no review
- **Valide cr√≠ticos**: Confirme que funcionalidade e seguran√ßa n√£o s√£o comprometidas
- **Priorize entrega**: C√≥digo working > padr√£o perfeito

## Processo de Code Review

### 1. Obten√ß√£o do Changeset

**ANTES DE INICIAR**: Consulte a [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

**EXECUTAR OBRIGATORIAMENTE:**

- **Verificar Branches**: Use `run_terminal_cmd` com `git branch -r` para listar branches remotas
- **Branch Atual**: Use `run_terminal_cmd` com `git branch --show-current` para identificar branch atual
- **Git Diff**: Use `run_terminal_cmd` com `git diff origin/develop` ou `git diff origin/master` se develop n√£o existir
- **An√°lise de Arquivos**: Identifique todos os arquivos modificados
- **Estat√≠sticas**: Colete n√∫mero de linhas adicionadas/removidas
- **Contexto**: Entenda o prop√≥sito das mudan√ßas

**A√á√ÉO**: Use `run_terminal_cmd` para executar comandos git necess√°rios.

### 2. An√°lise Sistem√°tica

**A√á√ïES OBRIGAT√ìRIAS:**

- **Por Arquivo**: Analisar cada arquivo modificado individualmente
- **Padr√µes**: Verificar conformidade com padr√µes de c√≥digo do projeto
- **Qualidade**: Avaliar legibilidade, manutenibilidade e performance
- **Seguran√ßa**: Identificar poss√≠veis vulnerabilidades
- **Testes**: Verificar cobertura e qualidade dos testes
- **TypeScript**: Validar tipagem completa e consistente
- **C√≥digo Morto**: Detectar c√≥digo comentado, imports n√£o utilizados e vari√°veis n√£o referenciadas

**A√á√ÉO**: Use `read_file` para examinar arquivos modificados quando necess√°rio.

### 3. Estrutura√ß√£o do Relat√≥rio

**A√á√ïES OBRIGAT√ìRIAS:**

- **Criar arquivo**: Use `edit_file` para criar na pasta `.notes/code-review`
- **Nomenclatura**: SEMPRE usar `YYYY-MM-DD-branch-name-vX-review.md` (come√ßar com v1)
- **Versionamento**: Incrementar vers√£o (v1, v2, v3...) a cada revis√£o do review
- **Data**: Use `run_terminal_cmd` com `date +%Y-%m-%d` se necess√°rio obter data atual
- **Template**: Aplicar template completo sem omitir se√ß√µes

**Exemplos de nomenclatura correta:**
- `2025-01-18-feature-dynamic-layout-v1-review.md` (vers√£o inicial)
- `2025-01-18-feature-dynamic-layout-v2-review.md` (primeira revis√£o)
- `2025-01-18-feature-dynamic-layout-v3-review.md` (segunda revis√£o)

### 4. Controle de Vers√µes

**EM CASO DE CONFLITO**: Consulte [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)

- Manter vers√µes anteriores para hist√≥rico de an√°lises
- Incluir no cabe√ßalho do review um log de mudan√ßas entre vers√µes
- Versionar quando houver mudan√ßas significativas em:
  - Nova an√°lise ap√≥s corre√ß√µes do desenvolvedor
  - Mudan√ßas na branch que requerem nova avalia√ß√£o
  - Atualiza√ß√µes na recomenda√ß√£o final
  - Descoberta de novos problemas ou melhorias

## Template do Relat√≥rio

```markdown
# Code Review: [Branch Name]

**Vers√£o**: v[X] | **Data**: YYYY-MM-DD | **Revisor**: [Nome do Revisor]
**Branch Base**: [Nome da Branch Base] | **Feature Branch**: [Nome da Feature Branch]

## Hist√≥rico de Vers√µes

| Vers√£o | Data | Mudan√ßas |
|--------|------|----------|
| v1 | YYYY-MM-DD | An√°lise inicial |
| v2 | YYYY-MM-DD | [Descri√ß√£o das mudan√ßas] |

## Sum√°rio

- **Arquivos alterados**: [N√∫mero total]
- **Linhas adicionadas**: [N√∫mero]
- **Linhas removidas**: [N√∫mero]
- **Arquivos novos**: [N√∫mero]
- **Arquivos deletados**: [N√∫mero]

## An√°lise Geral

[Vis√£o geral das mudan√ßas e seu impacto no sistema]

## Problemas Cr√≠ticos

[Lista de problemas que precisam ser resolvidos antes do merge]

## Sugest√µes de Melhoria

[Lista de sugest√µes para melhorar o c√≥digo, mas que n√£o bloqueiam o merge]

## An√°lise por Arquivo

### [Nome do Arquivo 1]

**Linha(s)**: XX-YY
- üö® **Problema**: [Descri√ß√£o]
- ‚ú® **Sugest√£o**: [Solu√ß√£o proposta]
- üìù **Impacto**: [Explica√ß√£o do impacto]

### [Nome do Arquivo 2]

**Linha(s)**: XX-YY
- ‚ö†Ô∏è **Importante**: [Descri√ß√£o]
- üí° **Sugest√£o**: [Melhoria opcional]
- ‚úÖ **Positivo**: [Aspecto bem implementado]

## Conclus√£o

**Recomenda√ß√£o**: [Aprovar / Aprovar com modifica√ß√µes / Reprovar]

**Justificativa**: [Explica√ß√£o da recomenda√ß√£o]

**Pr√≥ximos passos**: [A√ß√µes necess√°rias antes do merge]
```

## Diretrizes de An√°lise

### Aspectos T√©cnicos
- **Arquitetura**: Verificar se mudan√ßas seguem padr√µes arquiteturais
- **Performance**: Identificar poss√≠veis gargalos ou otimiza√ß√µes
- **Seguran√ßa**: Avaliar vulnerabilidades e exposi√ß√µes
- **Manutenibilidade**: Analisar legibilidade e facilidade de manuten√ß√£o

### Qualidade de C√≥digo
- **Padr√µes**: Conformidade com style guides e conven√ß√µes
- **Complexidade**: Identificar c√≥digo complexo demais
- **Duplica√ß√£o**: Detectar c√≥digo duplicado
- **Nomenclatura**: Verificar clareza de nomes de vari√°veis e fun√ß√µes

### Implementa√ß√£o Geral
- **Legibilidade**: Garantir que o c√≥digo seja leg√≠vel e compreens√≠vel, com nomes significativos para vari√°veis e fun√ß√µes
- **Tratamento de Erros**: Verificar se erros potenciais s√£o tratados adequadamente, especialmente para opera√ß√µes ass√≠ncronas
- **Performance**: Identificar gargalos de performance ou algoritmos ineficientes e sugerir otimiza√ß√µes
- **Organiza√ß√£o**: Verificar se arquivos e pastas est√£o organizados logicamente e de forma consistente com a estrutura do projeto

### Ader√™ncia √†s Melhores Pr√°ticas
- **Responsabilidade √önica**: Verificar se componentes s√£o pequenos e focados (Princ√≠pio da Responsabilidade √önica)
- **Gerenciamento de Estado**: Garantir uso apropriado de gerenciamento de estado e prevenir prop drilling desnecess√°rio
- **Estrutura de Projeto**: Verificar se arquivos e pastas seguem a organiza√ß√£o l√≥gica e consistente do projeto

### Considera√ß√µes de Escalabilidade
- **Reutiliza√ß√£o**: Recomendar refatora√ß√£o de c√≥digo duplicado em componentes ou fun√ß√µes utilit√°rias reutiliz√°veis
- **Padr√µes**: Sugerir padr√µes (como hooks ou Higher Order Components) que podem auxiliar na escalabilidade futura
- **Modularidade**: Verificar se o c√≥digo est√° estruturado de forma modular e extens√≠vel

### Melhores Pr√°ticas TypeScript
- **Tipagem Completa**: Garantir que todas as fun√ß√µes e m√©todos estejam adequadamente tipados. Nenhuma fun√ß√£o deve permanecer sem tipos expl√≠citos, incluindo par√¢metros e valores de retorno
- **Defini√ß√µes de Tipo**: Revisar todas as defini√ß√µes de tipo para consist√™ncia e corre√ß√£o. Garantir que n√£o existam tipos duplicados
- **Valida√ß√£o de Dados**: Confirmar que dados externos sejam adequadamente validados e tipados, minimizando erros potenciais em runtime
- **Evitar 'any'**: Desencorajar o uso do tipo 'any' e sugerir tipos mais espec√≠ficos quando aplic√°vel
- **Interfaces Consistentes**: Verificar consist√™ncia entre interfaces e implementa√ß√µes

### Verifica√ß√µes de Qualidade de C√≥digo
- **C√≥digo Comentado**: Detectar e sinalizar blocos de c√≥digo que foram comentados. Encorajar remo√ß√£o a menos que haja raz√£o v√°lida para mant√™-los como refer√™ncia
- **C√≥digo N√£o Utilizado**: Identificar e remover vari√°veis, fun√ß√µes ou imports n√£o utilizados. A presen√ßa de c√≥digo n√£o utilizado pode criar confus√£o e inchar a base de c√≥digo
- **Imports √ìrf√£os**: Detectar c√≥digo que n√£o √© importado em nenhum lugar do projeto
- **Dead Code**: Identificar fun√ß√µes, componentes ou m√≥dulos que n√£o s√£o referenciados

### Requisitos de Testes
- **Cobertura Completa**: Verificar se toda nova funcionalidade possui testes unit√°rios e de integra√ß√£o correspondentes
- **Casos Extremos**: Garantir que os testes incluam casos extremos e cen√°rios de borda
- **Cobertura M√≠nima**: Confirmar que o relat√≥rio de cobertura reflete um m√≠nimo de 100% de cobertura para as mudan√ßas feitas, sem lacunas significativas
- **Qualidade dos Testes**: Avaliar efetividade e clareza dos testes implementados

### Testes e Documenta√ß√£o
- **Cobertura**: Verificar se mudan√ßas t√™m testes adequados
- **Qualidade dos Testes**: Avaliar efetividade dos testes
- **Documenta√ß√£o**: Verificar se documenta√ß√£o foi atualizada
- **Coment√°rios**: Avaliar necessidade e qualidade de coment√°rios

### Categoriza√ß√£o de Feedback

**Usar SEMPRE os emojis apropriados:**
- üö® **Cr√≠tico**: Problemas que precisam ser resolvidos antes do merge
- ‚ö†Ô∏è **Importante**: Melhorias significativas recomendadas
- üí° **Sugest√£o**: Melhorias opcionais que agregam valor
- ‚úÖ **Positivo**: Aspectos bem implementados que merecem destaque

### Filosofia de Review

**Princ√≠pios Fundamentais:**
- **Foco em Problemas**: Comentar apenas sobre erros e oportunidades de melhoria. N√£o descrever c√≥digo que est√° correto
- **Solu√ß√µes Pr√°ticas**: Para qualquer erro detectado ou identifica√ß√£o de melhorias, gerar o c√≥digo necess√°rio para corre√ß√£o
- **Feedback Construtivo**: Fornecer sugest√µes espec√≠ficas e acion√°veis
- **Contexto T√©cnico**: Explicar o impacto e a raz√£o por tr√°s de cada sugest√£o

**Abordagem de An√°lise:**
- Atuar como um engenheiro de software frontend experiente
- Revisar mudan√ßas como se estivesse analisando um Pull Request
- Priorizar funcionalidade e seguran√ßa sobre padr√µes est√©ticos
- Balancear rigor t√©cnico com pragmatismo de entrega

## Gera√ß√£o de PR Description

### Quando Gerar
- Solicitado explicitamente para criar PR description
- Code review completo e aprovado
- Necess√°rio documentar mudan√ßas para o time

### Processo
- **Localiza√ß√£o**: Criar arquivo em `.notes/pr-description/`
- **Nomenclatura**: Usar mesmo nome do review substituindo `-vX-review.md` por `-vX-pr-description.md`
- **Conte√∫do**: Converter findings do review em descri√ß√£o estruturada de PR
- **Formato**: Seguir padr√µes de PR description da empresa

## Boas Pr√°ticas

### Linguagem e Formato
- Escrever reviews em portugu√™s brasileiro
- Manter termos t√©cnicos em ingl√™s (hooks, components, state, props, etc.)
- Preservar mensagens de erro em ingl√™s
- Usar vocabul√°rio t√©cnico preciso mantendo clareza

### Qualidade e Completude
- Analisar TODOS os arquivos modificados
- Fornecer feedback construtivo e espec√≠fico
- Incluir sugest√µes de solu√ß√£o para problemas identificados
- Destacar aspectos positivos al√©m dos problemas

### Estrutura e Organiza√ß√£o
- Usar headings claros para separar se√ß√µes
- Manter terminologia consistente
- Formatar feedback como coment√°rios inline quando apropriado
- Facilitar c√≥pia para GitHub com formata√ß√£o adequada

### Versionamento
- Incrementar vers√£o do arquivo a cada revis√£o significativa do review
- Manter hist√≥rico de vers√µes no cabe√ßalho do relat√≥rio
- Preservar vers√µes anteriores para rastreabilidade de an√°lises
- Documentar claramente as mudan√ßas entre vers√µes de review

## Checklist de Valida√ß√£o para LLM

Antes de finalizar o code review, OBRIGATORIAMENTE verificar:
**PRIORIZE**: Itens marcados como "Cr√≠tico" na [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

### ‚úÖ Cr√≠tico (Bloqueia entrega)
- [ ] Git diff executado e changeset obtido
- [ ] TODOS os arquivos modificados analisados individualmente
- [ ] ARQUIVO F√çSICO CRIADO usado `edit_file` para criar arquivo em `.notes/code-review/`
- [ ] Template de relat√≥rio aplicado corretamente
- [ ] Nomenclatura e localiza√ß√£o corretas: `YYYY-MM-DD-branch-name-vX-review.md` em `.notes/code-review/`
- [ ] Se solicitado PR description**: Arquivo criado em `.notes/pr-description/` com nomenclatura correta

### ‚úÖ Importante (Impacta qualidade)
- [ ] Problemas cr√≠ticos identificados e documentados
- [ ] Sugest√µes de melhoria fornecidas para cada arquivo
- [ ] Feedback categorizado com emojis (üö®‚ö†Ô∏èüí°‚úÖ)
- [ ] Recomenda√ß√£o final clara (Aprovar/Modificar/Reprovar)
- [ ] An√°lise por arquivo com linhas espec√≠ficas referenciadas
- [ ] Aspectos positivos destacados

**IMPORTANTE**: N√£o finalize sem completar itens "Cr√≠ticos". Code review requer an√°lise completa de TODOS os arquivos E cria√ß√£o de arquivos f√≠sicos.
