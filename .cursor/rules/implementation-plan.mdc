---
description: 
globs: 
alwaysApply: false
---
---
description: Implementation plan
globs: ["*"]
alwaysApply: true
---

# Regras para Planos de Implementa√ß√£o

## Instru√ß√µes para LLM

**A√á√ÉO OBRIGAT√ìRIA**: Quando solicitado para criar um plano de implementa√ß√£o, siga EXATAMENTE esta sequ√™ncia:

1. **VERIFICAR**: Confirme se a solicita√ß√£o se enquadra nos crit√©rios da se√ß√£o "Quando Aplicar"
2. **ANALISAR**: Execute an√°lise completa antes de qualquer planejamento
3. **ESTRUTURAR**: Organize o plano seguindo os padr√µes estabelecidos
4. **CRIAR ARQUIVO**: Use `edit_file` para criar o arquivo seguindo a nomenclatura obrigat√≥ria
5. **APLICAR TEMPLATE**: Use EXATAMENTE o template fornecido, preenchendo todas as se√ß√µes
6. **VALIDAR**: Verifique se incluiu todos os elementos obrigat√≥rios antes de finalizar

**NOMENCLATURA OBRIGAT√ìRIA**: `YYYY-MM-DD-nome-da-feature-vX-plan.md` (sempre come√ßar com v1)

**LOCALIZA√á√ÉO OBRIGAT√ìRIA**: `.notes/implementation-plan/`

## Fluxo de Desenvolvimento Linear

```
IN√çCIO
  ‚Üì
üìã Consultar [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)
  ‚Üì
üîç Executar [An√°lise Inicial](mdc:#1-an√°lise-inicial)
  ‚Üì
üõ†Ô∏è Aplicar [Estrutura√ß√£o do Plano](mdc:#2-estrutura√ß√£o-do-plano) + [Template](mdc:#3-template-do-plano)
  ‚Üì
‚öñÔ∏è Conflito? ‚Üí [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)
  ‚Üì
‚úÖ [Verifica√ß√£o e Valida√ß√£o](mdc:#checklist-de-valida√ß√£o-para-llm)
  ‚Üì
üéØ FINALIZADO
```

## Modo R√°pido (Para mudan√ßas simples)

**Use quando**: Pequenas features, ajustes de componentes, ou modifica√ß√µes triviais

**Processo simplificado**:
1. ‚úÖ Verificar se √© realmente simples (sem depend√™ncias complexas)
2. üõ†Ô∏è Criar plano b√°sico seguindo template
3. üîç Focar apenas em passos essenciais
4. ‚úÖ Validar apenas itens "Cr√≠ticos" do checklist

**Pular para casos simples**: An√°lise detalhada de impacto, documenta√ß√£o extensa, versionamento complexo

## Quando Aplicar

Esta rule deve ser aplicada quando:
- Solicitado para criar um plano de implementa√ß√£o de nova funcionalidade
- Necess√°rio estruturar uma abordagem para modifica√ß√µes complexas
- Requerido documentar estrat√©gia antes da implementa√ß√£o
- Preciso avaliar impacto e depend√™ncias de mudan√ßas

## √çndice de Navega√ß√£o R√°pida

- üö® [Matriz de Prioridades](mdc:#0-matriz-de-prioridades) - **Consulte PRIMEIRO**
- ‚öñÔ∏è [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos) - Para decis√µes dif√≠ceis
- üîç [An√°lise Inicial](mdc:#1-an√°lise-inicial) - In√≠cio do planejamento
- üõ†Ô∏è [Estrutura√ß√£o do Plano](mdc:#2-estrutura√ß√£o-do-plano) - Durante cria√ß√£o
- ‚úÖ [Checklist Final](mdc:#checklist-de-valida√ß√£o-para-llm) - Antes de finalizar

## 0. Matriz de Prioridades

### Cr√≠tico (Bloqueia planejamento)
- An√°lise inicial executada
- Template aplicado corretamente
- Nomenclatura e localiza√ß√£o corretas
- Passos de implementa√ß√£o definidos

### Importante (Impacta qualidade)
- Tecnologias e componentes especificados
- An√°lise de impacto realizada
- Estrat√©gia de testes definida
- Versionamento implementado

### Opcional (Melhoria incremental)
- Documenta√ß√£o detalhada
- Diagramas visuais
- Casos extremos considerados
- Formata√ß√£o para GitHub otimizada

## Resolu√ß√£o de Conflitos

### Ordem de Preced√™ncia:
1. **Funcionalidade > Padr√µes**: Se um padr√£o impede a funcionalidade, priorize a funcionalidade
2. **Seguran√ßa > Performance**: Nunca comprometa seguran√ßa por performance
3. **Legibilidade > Otimiza√ß√£o**: C√≥digo leg√≠vel √© mais importante que micro-otimiza√ß√µes
4. **Conven√ß√µes do projeto > Prefer√™ncias pessoais**: Siga o que j√° existe no projeto

### Protocolo de Decis√£o:
1. **Identifique o conflito**: Qual diretriz est√° sendo violada?
2. **Consulte a preced√™ncia**: Use a ordem acima para decidir
3. **Documente a exce√ß√£o**: Explique por que divergiu
4. **Valide o m√≠nimo**: Garanta que itens "Cr√≠ticos" ainda s√£o atendidos

### Exemplos Pr√°ticos:
```typescript
// ‚ùå Conflito: Padr√£o vs Funcionalidade
// Padr√£o diz: "use componentes Andes"
// Mas: componente espec√≠fico n√£o existe no Andes

// ‚úÖ Resolu√ß√£o: Priorizar funcionalidade
// Plano: "Implementar componente customizado seguindo padr√µes Andes. Considerar contribui√ß√£o futura para biblioteca."
```

### Quando Divergir:
- **Documente**: Adicione justificativa no plano
- **Valide cr√≠ticos**: Confirme que an√°lise e template ainda s√£o seguidos
- **Priorize entrega**: Funcionalidade working > padr√£o perfeito

## Processo de Implementa√ß√£o

### 1. An√°lise Inicial

**ANTES DE INICIAR**: Consulte a [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

**EXECUTAR OBRIGATORIAMENTE:**

- **Requisitos**: Analisar requisitos e imagens de refer√™ncia cuidadosamente
- **Funcionalidade**: Identificar a funcionalidade principal e componentes necess√°rios
- **Mapeamento**: Mapear a estrutura do c√≥digo atual antes de propor mudan√ßas
- **Ferramentas**: Verificar ferramentas e bibliotecas dispon√≠veis (Andes, Nordic, Fury, etc.)
- **Documenta√ß√£o**: Consultar documenta√ß√£o MCP para padr√µes de componentes
- **Impacto**: Avaliar impacto em outros componentes e poss√≠veis depend√™ncias

**A√á√ÉO**: Use `codebase_search`, `file_search` e `read_file` para executar esta an√°lise.

### 2. Estrutura√ß√£o do Plano

**A√á√ïES OBRIGAT√ìRIAS:**

- **Criar arquivo**: Use `edit_file` para criar na pasta `.notes/implementation-plan`
- **Nomenclatura**: SEMPRE usar `YYYY-MM-DD-nome-da-feature-vX-plan.md` (come√ßar com v1)
- **Data**: Use `run_terminal_cmd` com `date +%Y-%m-%d` se necess√°rio obter data atual
- **Versionamento**: Para revis√µes, incrementar v1 ‚Üí v2 ‚Üí v3...
- **Template**: Aplicar template completo sem omitir se√ß√µes

**Exemplos de nomenclatura correta:**
- `2025-01-18-campos-condicionais-v1-plan.md` (vers√£o inicial)
- `2025-01-18-campos-condicionais-v2-plan.md` (primeira revis√£o)
- `2025-01-18-campos-condicionais-v3-plan.md` (segunda revis√£o)

### 3. Template do Plano

**EM CASO DE CONFLITO**: Consulte [Resolu√ß√£o de Conflitos](mdc:#resolu√ß√£o-de-conflitos)

```markdown
# Plano de Implementa√ß√£o: [Nome da Feature]

**Vers√£o**: v[X] | **Data**: YYYY-MM-DD | **Autor**: [Nome]

## Hist√≥rico de Vers√µes

| Vers√£o | Data | Mudan√ßas |
|--------|------|----------|
| v1 | YYYY-MM-DD | Vers√£o inicial |
| v2 | YYYY-MM-DD | [Descri√ß√£o das mudan√ßas] |

## Contexto e Objetivo

[Descri√ß√£o clara do problema e objetivo da implementa√ß√£o]

## Tecnologias e Componentes

- [Bibliotecas e componentes necess√°rios (Andes, Nordic, Fury)]
- [Refer√™ncia a documenta√ß√µes relevantes]

## An√°lise de Impacto

[Impacto em outros componentes e poss√≠veis depend√™ncias]

## Passos de Implementa√ß√£o

### 1. [Nome do Primeiro Passo]

**Arquivo**: `caminho/para/o/arquivo`

[Descri√ß√£o detalhada do que ser√° feito]

```typescript
// Exemplo de c√≥digo ou pseudoc√≥digo
```

### 2. [Nome do Segundo Passo]

**Arquivo**: `caminho/para/o/arquivo`

[Descri√ß√£o detalhada]

## Estrat√©gia de Testes

[Estrat√©gia de testes a ser implementada]

## Documenta√ß√£o (quando necess√°rio)

[Incluir apenas se a feature atender aos crit√©rios de documenta√ß√£o]

### Crit√©rios para Incluir Documenta√ß√£o
- Feature exp√µe APIs ou interfaces p√∫blicas
- Nova funcionalidade requer configura√ß√£o espec√≠fica
- Mudan√ßas afetam par√¢metros ou comportamentos externos
- Implementa√ß√£o de componentes ou m√≥dulos reutiliz√°veis

## Resumo das Altera√ß√µes

1. [Resumo do primeiro item]
2. [Resumo do segundo item]
...
```

### 4. Controle de Vers√µes

- Manter vers√µes anteriores para hist√≥rico de decis√µes
- Incluir no cabe√ßalho do plano um log de mudan√ßas entre vers√µes
- Versionar quando houver mudan√ßas significativas em:
  - Abordagem de implementa√ß√£o
  - Tecnologias ou componentes utilizados
  - Estrutura de passos
  - Estrat√©gia de testes ou documenta√ß√£o

## Diretrizes de Implementa√ß√£o

### Uso de Componentes
- Priorizar componentes Andes, Nordic e outras bibliotecas internas
- Consultar MCP Servers para documenta√ß√£o de componentes
- Identificar componentes existentes que podem ser reutilizados

### Considera√ß√µes de Design
- Seguir padr√µes visuais existentes
- Manter consist√™ncia com o design system da empresa
- Considerar acessibilidade nas implementa√ß√µes

### Integra√ß√£o com Sistemas Existentes
- Explicar como a nova funcionalidade se integra ao c√≥digo existente
- Detalhar mudan√ßas em tipos e interfaces
- Considerar o impacto em outras partes do sistema

### Formata√ß√£o de C√≥digo
- Incluir exemplos de c√≥digo com formata√ß√£o apropriada
- Usar syntax highlighting para o tipo de arquivo correto
- Destacar partes relevantes com coment√°rios

## Documenta√ß√£o de Produto

### Quando Documentar
**Obrigat√≥ria:**
- Feature exp√µe APIs p√∫blicas ou interfaces
- Mudan√ßas afetam par√¢metros de entrada ou comportamentos externos
- Nova funcionalidade requer configura√ß√£o espec√≠fica
- Implementa√ß√£o de novos m√≥dulos remotos ou componentes reutiliz√°veis

**Opcional:**
- Funcionalidades complexas que podem ser reutilizadas
- Padr√µes de implementa√ß√£o que podem servir de refer√™ncia
- Configura√ß√µes avan√ßadas que podem beneficiar outros desenvolvedores

### Estrutura de Documenta√ß√£o
- Seguir o padr√£o docsify existente em `docs/guide/`
- Criar arquivos markdown conforme a necessidade da feature
- Organizar em pastas quando houver m√∫ltiplos arquivos relacionados
- Atualizar `docs/guide/_sidebar.md` para incluir nova documenta√ß√£o na navega√ß√£o

### Princ√≠pios de Conte√∫do
- **Vi√©s duplo**: Combinar perspectiva de produto e t√©cnica
- **APIs e interfaces**: Propriedades, m√©todos e configura√ß√µes p√∫blicas
- **Par√¢metros**: Como diferentes inputs afetam o comportamento
- **Configura√ß√£o**: Exemplos pr√°ticos de uso e configura√ß√£o
- **Funcionalidades**: Recursos dispon√≠veis e como utiliz√°-los

## Boas Pr√°ticas

### Linguagem e Formato
- Escrever planos em portugu√™s, mantendo termos t√©cnicos em ingl√™s
- Incluir exemplos visuais ou diagramas quando necess√°rio
- Numerar cada passo de forma clara

### Qualidade e Completude
- Gerar planos detalhados com passos incrementais
- Incluir exemplos de c√≥digo para cada passo
- Destacar poss√≠veis pontos de aten√ß√£o ou desafios
- Referenciar documenta√ß√£o oficial quando relevante

### Conformidade
- Seguir as conven√ß√µes de c√≥digo existentes no projeto
- Incluir estrat√©gias de teste para a implementa√ß√£o
- Criar diagramas de fluxo quando necess√°rio

### Versionamento
- Incrementar vers√£o do arquivo a cada altera√ß√£o significativa
- Manter hist√≥rico de vers√µes no cabe√ßalho do plano
- Preservar vers√µes anteriores para rastreabilidade de decis√µes
- Documentar claramente as mudan√ßas entre vers√µes

## Checklist de Valida√ß√£o para LLM

Antes de finalizar o plano, OBRIGATORIAMENTE verificar:
**PRIORIZE**: Itens marcados como "Cr√≠tico" na [Matriz de Prioridades](mdc:#0-matriz-de-prioridades)

### ‚úÖ Cr√≠tico (Bloqueia entrega)
- [ ] An√°lise inicial executada com ferramentas dispon√≠veis
- [ ] Template aplicado corretamente
- [ ] Nomenclatura correta: `YYYY-MM-DD-nome-da-feature-vX-plan.md` em `.notes/implementation-plan/`
- [ ] Passos de implementa√ß√£o numerados e detalhados

### ‚úÖ Importante (Impacta qualidade)
- [ ] Tecnologias e componentes especificados
- [ ] An√°lise de impacto realizada
- [ ] Estrat√©gia de testes definida
- [ ] Cada passo inclui arquivo de destino
- [ ] Exemplos de c√≥digo inclu√≠dos quando relevante

**IMPORTANTE**: N√£o finalize sem completar itens "Cr√≠ticos". Plano requer an√°lise completa e estrutura adequada.
